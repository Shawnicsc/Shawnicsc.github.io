<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>随笔--记失眠的一晚</title>
      <link href="/2023/12/16/sui-bi-ji-shi-mian-de-yi-wan/"/>
      <url>/2023/12/16/sui-bi-ji-shi-mian-de-yi-wan/</url>
      
        <content type="html"><![CDATA[<h1 id="随笔-——-记失眠的一晚"><a href="#随笔-——-记失眠的一晚" class="headerlink" title="随笔 —— 记失眠的一晚"></a>随笔 —— 记失眠的一晚</h1><p>不知道是因为什么缘故，今夜辗转反侧，难以入眠。遂翻身而下，不愿在与网易云音乐做半梦半醒的挣扎，在虚无中消磨掉夜晚的自由与白天的阴暗，想着用一篇博客记录下此时的所想，也算无病呻吟，聊以慰藉。</p><p>窗外的大雪淹没了时间的痕迹，悄无声息带走了这一学期的时光，也带走了四季。很快就要进入新的一年，一年的末尾时，总爱去想自己这一年究竟有了哪些成长，有了多少收获，就像出海的渔人一般，清点着别样的鱼获。可是，真的会有成长嘛？我以为的成长是真的有吗？这我不知道，但是我唯一确定的是，每一天后的我，会比前一天拥有更多勇气，或者说，每一天都在去试错，都在去和自己斗争，和自己的惰性，和自己的劣根性，进行一次又一次的斗争。有时候，我能够胜利，有时候，却输的彻底。我希望我能一直获胜，做一个常胜将军，我希望我能不向自己妥协，与自己做下的约定一定去完成，我希望我能坚持这一想法，直至生命终结。</p><p>眨眼之间，已经20岁，已达弱冠之龄，可是，我的眼中并没有对未来很执着的向往，反而更加怀念从前，对未来的展望中总是遍布着疑云，对每一条路的选择都抱有着不确定以及不自信能否走到最后的想法，我想拥有一个不会让自己后悔的人生，我想能够去过自己想过的生活，我想我可以去实现前所未有的自由，我想···或许这一切在几年后会有一个结果，但，我不敢去想这个结果，我怕这个结果并不是我想要那一种，我只能不断地想象未来的美好，同时担心着这美好只会是镜花水月，与现实相去甚远。这样的想法不断让我内耗自己不多的精力，希望以后不会再这么想象。</p><p>失眠的原因，大抵是不知道的，只知道自己在这寒冷但又温热的夜晚，于案前咬文嚼字，或许多年后回想，倒有几分可笑，但是，我始终怀着一颗赤诚的心，不论是对人，还是对事。</p><p>文末停笔，现已4点，慢慢听着雪落下的声音，希望能早一刻进入灵魂的安居。</p><p>2023-12-16</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米便签维护开发</title>
      <link href="/2023/12/14/xiao-mi-bian-qian-wei-hu-kai-fa/"/>
      <url>/2023/12/14/xiao-mi-bian-qian-wei-hu-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Mi-Note"><a href="#Mi-Note" class="headerlink" title="Mi Note"></a>Mi Note</h1><h2 id="项目来源"><a href="#项目来源" class="headerlink" title="项目来源"></a>项目来源</h2><p><code>MiCode</code>便签是小米便签的社区开源版，由MIUI团队(<a href="http://www.miui.com/">www.miui.com</a>) 发起并贡献第一批代码，遵循NOTICE文件所描述的开源协议，今后为<code>MiCode</code>社区(<a href="http://www.micode.net/">www.micode.net</a>) 拥有，并由社区发布和维护。</p><p>项目源地址：<a href="https://github.com/MiCode/Notes">https://github.com/MiCode/Notes</a><br>本项目地址：<a href="https://github.com/Shawnicsc/MiNote">https://github.com/Shawnicsc/MiNote</a></p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p><strong>Android Studio 2022.3</strong></p><p><strong>Gradle 8.1.3</strong></p><p><strong>SDK 11</strong></p><p><strong>JDK 17</strong></p><p><strong>阿里云数据库 – MySQL</strong></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><p>可安装的程序包（apk文件） 在 release 文件下，直接安装运行。</p><h2 id="新增功能介绍"><a href="#新增功能介绍" class="headerlink" title="新增功能介绍"></a>新增功能介绍</h2><h3 id="1、登录注册功能"><a href="#1、登录注册功能" class="headerlink" title="1、登录注册功能"></a>1、登录注册功能</h3><p><img src="/2023/12/14/xiao-mi-bian-qian-wei-hu-kai-fa/login.png" alt="login"></p><h3 id="2、上传下载功能"><a href="#2、上传下载功能" class="headerlink" title="2、上传下载功能"></a>2、上传下载功能</h3><p><img src="/2023/12/14/xiao-mi-bian-qian-wei-hu-kai-fa/export.png" alt="export"></p><h3 id="3、加密文件功能"><a href="#3、加密文件功能" class="headerlink" title="3、加密文件功能"></a>3、加密文件功能</h3><p>首先给<code>note</code>数据库添加属性<code>password locker</code>，当用户编辑便签，选择设置密码时，调用<code>setPassword</code>方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (itemId == R.id.menu_set_passwd) {</span><br><span class="line">           setPassword();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在<code>setPassword</code>中，首先定义对话框，以及对话框的布局和内容</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对话框</span></span><br><span class="line">       <span class="keyword">final</span> AlertDialog.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line">       <span class="keyword">final</span> <span class="type">View</span> <span class="variable">view</span> <span class="operator">=</span> LayoutInflater.from(<span class="built_in">this</span>).inflate(R.layout.dialog_edit_text,<span class="literal">null</span>);</span><br><span class="line">       <span class="comment">//编辑Text</span></span><br><span class="line">       <span class="keyword">final</span> EditText etNameOld= (EditText)view.findViewById(R.id.old_password);<span class="comment">//如果设置了密码，这是原密码</span></span><br><span class="line">       etNameOld.setVisibility(view.GONE);</span><br><span class="line">       <span class="keyword">final</span> TextView etNameOld_View=(TextView)view.findViewById(R.id.old_password_view);</span><br><span class="line">       etNameOld_View.setVisibility(view.GONE);</span><br><span class="line"><span class="comment">//如果之前已经设置了密码</span></span><br><span class="line">       <span class="keyword">if</span> (mWorkingNote.hasPassword()){</span><br><span class="line">           etNameOld.setVisibility(view.VISIBLE);</span><br><span class="line">           etNameOld_View.setVisibility(view.VISIBLE);</span><br><span class="line">           etNameOld.setText(<span class="string">""</span>);</span><br><span class="line">           etNameOld.setHint(<span class="string">"请输入原密码"</span>);</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">final</span> <span class="type">EditText</span> <span class="variable">etName</span> <span class="operator">=</span> (EditText)view.findViewById(R.id.new_password);<span class="comment">//要设置的密码</span></span><br><span class="line">       <span class="keyword">final</span> EditText etNameAgain=(EditText)view.findViewById(R.id.new_password_again);<span class="comment">//确认密码</span></span><br><span class="line">       <span class="comment">//final EditText finalEtNameOld = etNameOld;</span></span><br><span class="line">       etName.setText(<span class="string">""</span>);</span><br><span class="line">       etName.setHint(<span class="string">"请输入密码"</span>);</span><br><span class="line">       etNameAgain.setText(<span class="string">""</span>);</span><br><span class="line">       etNameAgain.setHint(<span class="string">"请确认密码"</span>);</span><br><span class="line">       builder.setTitle(<span class="string">"设置密码"</span>);</span><br></pre></td></tr></tbody></table></figure><p>在点击ok 后进行错误判断和操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">builder.setPositiveButton(<span class="string">"OK"</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() {</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> {</span><br><span class="line">               <span class="comment">//获取输入的字符串</span></span><br><span class="line">               <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> etName.getText().toString();</span><br><span class="line">               String password_again=etNameAgain.getText().toString();</span><br><span class="line">               <span class="type">String</span> <span class="variable">password_old</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">               <span class="keyword">if</span> (mWorkingNote.hasPassword()){</span><br><span class="line">                   password_old= etNameOld.getText().toString();</span><br><span class="line">               }</span><br><span class="line">               <span class="comment">//当输入原密码不对时</span></span><br><span class="line">               <span class="keyword">if</span> (mWorkingNote.hasPassword()) {</span><br><span class="line">                   <span class="keyword">if</span>(!password_old.equals(mWorkingNote.getmPassword())) {</span><br><span class="line">                       Toast.makeText(NoteEditActivity.<span class="built_in">this</span>, <span class="string">"原密码错误"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                       <span class="keyword">return</span>;</span><br><span class="line">                   }</span><br><span class="line">               }</span><br><span class="line">               <span class="comment">//当设置的密码为空的时候</span></span><br><span class="line">               <span class="keyword">if</span> (password==<span class="literal">null</span> || password.length()==<span class="number">0</span>){</span><br><span class="line">                   <span class="comment">//关闭软键盘</span></span><br><span class="line">                   <span class="type">InputMethodManager</span> <span class="variable">inputMethodManager</span> <span class="operator">=</span> (InputMethodManager)</span><br><span class="line">                           getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">                   inputMethodManager.hideSoftInputFromWindow(etName.getWindowToken(),<span class="number">0</span>);</span><br><span class="line">                   dialog.dismiss();</span><br><span class="line">                   Toast.makeText(NoteEditActivity.<span class="built_in">this</span>, <span class="string">"密码不能为空"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               }</span><br><span class="line">               <span class="comment">//当确认密码不对时</span></span><br><span class="line">               <span class="keyword">if</span> (!password.equals(password_again)){</span><br><span class="line">                   Toast.makeText(NoteEditActivity.<span class="built_in">this</span>, <span class="string">"密码不一致"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                   <span class="keyword">return</span>;</span><br><span class="line">               }</span><br><span class="line">               <span class="comment">//设置密码</span></span><br><span class="line">               mWorkingNote.setPassword(password);</span><br><span class="line">               mWorkingNote.setLocker(<span class="string">"1"</span>);<span class="comment">//设置密码标志为上锁</span></span><br><span class="line">               <span class="comment">//设置密码成功提示</span></span><br><span class="line">               Toast.makeText(NoteEditActivity.<span class="built_in">this</span>, <span class="string">"密码设置成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">               <span class="comment">//关闭软键盘</span></span><br><span class="line">               <span class="type">InputMethodManager</span> <span class="variable">inputMethodManager</span> <span class="operator">=</span> (InputMethodManager)</span><br><span class="line">                       getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">               inputMethodManager.hideSoftInputFromWindow(etName.getWindowToken(),<span class="number">0</span>);</span><br><span class="line">               <span class="comment">//关闭dialog</span></span><br><span class="line">               dialog.dismiss();</span><br><span class="line">           }</span><br><span class="line">       });</span><br></pre></td></tr></tbody></table></figure><p>点击取消按钮时，对应操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">builder.setNegativeButton(<span class="string">"cancel"</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() {</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> which)</span> {</span><br><span class="line">               <span class="comment">//关闭软键盘</span></span><br><span class="line">               <span class="type">InputMethodManager</span> <span class="variable">inputMethodManager</span> <span class="operator">=</span> (InputMethodManager)</span><br><span class="line">                       getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">               inputMethodManager.hideSoftInputFromWindow(etName.getWindowToken(),<span class="number">0</span>);</span><br><span class="line">           }</span><br><span class="line">       });</span><br><span class="line">       <span class="keyword">final</span> <span class="type">Dialog</span> <span class="variable">dialog</span> <span class="operator">=</span> builder.setView(view).show();</span><br><span class="line">       dialog.show();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/12/14/xiao-mi-bian-qian-wei-hu-kai-fa/passwd.png" alt="passwd"></p><h3 id="4、更换字体功能"><a href="#4、更换字体功能" class="headerlink" title="4、更换字体功能"></a>4、更换字体功能</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showSingleAlertDiglog</span><span class="params">()</span>{</span><br><span class="line">    <span class="keyword">final</span> String[] items = {<span class="string">"方正舒体"</span>,<span class="string">"仿宋"</span>,<span class="string">"黑体"</span>,<span class="string">"隶书"</span>,<span class="string">"行楷"</span>,<span class="string">"幼圆"</span>};</span><br><span class="line">    <span class="comment">//设置对话框</span></span><br><span class="line">    AlertDialog.<span class="type">Builder</span> <span class="variable">alertBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlertDialog</span>.Builder(<span class="built_in">this</span>);</span><br><span class="line">    alertBuilder.setTitle(<span class="string">"字体选择"</span>);</span><br><span class="line">    alertBuilder.setSingleChoiceItems(items, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> i)</span> {</span><br><span class="line">            <span class="comment">//切换字体选择</span></span><br><span class="line">            <span class="keyword">switch</span>(i){</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="type">Typeface</span> <span class="variable">typeface0</span> <span class="operator">=</span> Typeface.createFromAsset(getAssets(),<span class="string">"font/FZSTK.TTF"</span>);</span><br><span class="line">                    mNoteEditor.setTypeface(typeface0);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="type">Typeface</span> <span class="variable">typeface1</span> <span class="operator">=</span> Typeface.createFromAsset(getAssets(),<span class="string">"font/SIMYOU.TTF"</span>);</span><br><span class="line">                    mNoteEditor.setTypeface(typeface1);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="type">Typeface</span> <span class="variable">typeface2</span> <span class="operator">=</span> Typeface.createFromAsset(getAssets(),<span class="string">"font/STLITI.TTF"</span>);</span><br><span class="line">                    mNoteEditor.setTypeface(typeface2);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="type">Typeface</span> <span class="variable">typeface3</span> <span class="operator">=</span> Typeface.createFromAsset(getAssets(),<span class="string">"font/STXINGKA.TTF"</span>);</span><br><span class="line">                    mNoteEditor.setTypeface(typeface3);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    <span class="type">Typeface</span> <span class="variable">typeface4</span> <span class="operator">=</span> Typeface.createFromAsset(getAssets(),<span class="string">"font/simfang.ttf"</span>);</span><br><span class="line">                    mNoteEditor.setTypeface(typeface4);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    <span class="type">Typeface</span> <span class="variable">typeface5</span> <span class="operator">=</span> Typeface.createFromAsset(getAssets(),<span class="string">"font/simhei.ttf"</span>);</span><br><span class="line">                    mNoteEditor.setTypeface(typeface5);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    <span class="comment">//绑定按钮事件</span></span><br><span class="line">    alertBuilder.setPositiveButton(<span class="string">"确定"</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> i)</span> {</span><br><span class="line">            alertDialog2.dismiss();</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    alertBuilder.setNegativeButton(<span class="string">"取消"</span>, <span class="keyword">new</span> <span class="title class_">DialogInterface</span>.OnClickListener() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(DialogInterface dialog, <span class="type">int</span> i)</span> {</span><br><span class="line">            alertDialog2.dismiss();</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    alertDialog2 = alertBuilder.create();</span><br><span class="line">    alertDialog2.show();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/12/14/xiao-mi-bian-qian-wei-hu-kai-fa/font.png" alt="font"></p><h3 id="5、实时模糊搜索功能"><a href="#5、实时模糊搜索功能" class="headerlink" title="5、实时模糊搜索功能"></a>5、实时模糊搜索功能</h3><p>首先在<code>layout</code>创建一个<code>note_search_list.xml</code> , 显示搜索界面</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SearchView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/search_view"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:iconifiedByDefault</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:queryHint</span>=<span class="string">"输入搜索内容..."</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SearchView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@android:id/list"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在新建一个<code>notelist_item.xml</code>，用于显示搜索结果</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Copyright (C) 2010 The Android Open Source Project</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment">     you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">     You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">          http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">     distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment">     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">     See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">     limitations under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加一个垂直的显示布局--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span>  <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/layout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@android:id/text1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"?android:attr/listPreferredItemHeight"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAppearance</span>=<span class="string">"?android:attr/textAppearanceLarge"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingLeft</span>=<span class="string">"5dip"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加 显示时间 的TextView--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/text1_time"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textAppearance</span>=<span class="string">"?android:attr/textAppearanceSmall"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:paddingLeft</span>=<span class="string">"5dip"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在<code>NoteListActivity</code>中<code>onOptionsItemSelected</code>中添加开启activity</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (itemId == R.id.menu_search) {</span><br><span class="line">            onSearchRequested();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onSearchRequested</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>();</span><br><span class="line">        intent.setClass(NotesListActivity.<span class="built_in">this</span>,NoteSearch.class);</span><br><span class="line">        NotesListActivity.<span class="built_in">this</span>.startActivity(intent);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>NoteSearch</code> 首先继承 <code>ListActivity </code>用于显示结果的垂直布局，在实现<code>SearchView.OnQueryTextListener</code>,用于搜索查询。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressLint("NewApi")</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoteSearch</span> <span class="keyword">extends</span> <span class="title class_">ListActivity</span> <span class="keyword">implements</span> <span class="title class_">SearchView</span>.OnQueryTextListener {</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> {</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.note_search_list);</span><br><span class="line">        <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> getIntent();</span><br><span class="line">        <span class="keyword">if</span> (intent.getData() == <span class="literal">null</span>) {</span><br><span class="line">            intent.setData(Notes.CONTENT_NOTE_URI);</span><br><span class="line">        }</span><br><span class="line">        <span class="type">SearchView</span> <span class="variable">searchview</span> <span class="operator">=</span> (SearchView)findViewById(R.id.search_view);</span><br><span class="line">        <span class="comment">//为查询文本框注册监听器</span></span><br><span class="line">        searchview.setOnQueryTextListener(NoteSearch.<span class="built_in">this</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onQueryTextSubmit</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onQueryTextChange</span><span class="params">(String s)</span> {</span><br><span class="line">        <span class="comment">// 获取用户在搜索框中输入的文本</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">searchText</span> <span class="operator">=</span> <span class="string">"%"</span> + s + <span class="string">"%"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建内容提供者 URI</span></span><br><span class="line">        <span class="type">Uri</span> <span class="variable">contentUri</span> <span class="operator">=</span> Notes.CONTENT_NOTE_URI;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行查询操作，小米便签中 在NoteProvider中已经封装好搜索的功能，使用ContentResolver 调用对应的方法即可</span></span><br><span class="line">        <span class="type">ContentResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> getContentResolver();</span><br><span class="line">        String[] projection = NoteItemData.PROJECTION;</span><br><span class="line">        <span class="type">String</span> <span class="variable">selection</span> <span class="operator">=</span> Notes.NoteColumns.SNIPPET + <span class="string">" Like ? "</span>;</span><br><span class="line">        String[] selectionArgs = { searchText };</span><br><span class="line">        <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> resolver.query(contentUri, projection, selection, selectionArgs, <span class="literal">null</span>);</span><br><span class="line">        String[] dataColumns = { Notes.NoteColumns.SNIPPET , Notes.NoteColumns.MODIFIED_DATE};</span><br><span class="line">        <span class="type">int</span>[] viewIDs = { android.R.id.text1 , R.id.text1_time };</span><br><span class="line"></span><br><span class="line">        <span class="type">MyCursorAdapter</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyCursorAdapter</span>(</span><br><span class="line">                <span class="built_in">this</span>,</span><br><span class="line">                R.layout.noteslist_item,</span><br><span class="line">                cursor,</span><br><span class="line">                dataColumns,</span><br><span class="line">                viewIDs</span><br><span class="line">        );</span><br><span class="line">        setListAdapter(adapter);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onListItemClick</span><span class="params">(ListView l, View v, <span class="type">int</span> position, <span class="type">long</span> id)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Constructs a new URI from the incoming URI and the row ID</span></span><br><span class="line">        <span class="type">Uri</span> <span class="variable">uri</span> <span class="operator">=</span> ContentUris.withAppendedId(getIntent().getData(), id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Gets the action from the incoming Intent</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">action</span> <span class="operator">=</span> getIntent().getAction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Handles requests for note data</span></span><br><span class="line">        <span class="keyword">if</span> (Intent.ACTION_PICK.equals(action) || Intent.ACTION_GET_CONTENT.equals(action)) {</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Sets the result to return to the component that called this Activity. The</span></span><br><span class="line">            <span class="comment">// result contains the new URI</span></span><br><span class="line">            setResult(RESULT_OK, <span class="keyword">new</span> <span class="title class_">Intent</span>().setData(uri));</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Sends out an Intent to start an Activity that can handle ACTION_EDIT. The</span></span><br><span class="line">            <span class="comment">// Intent's data is the note ID URI. The effect is to call NoteEdit.</span></span><br><span class="line">            startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_EDIT, uri));</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在<code>MyCursorAdapter</code>中，对样式进行处理</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCursorAdapter</span> <span class="keyword">extends</span> <span class="title class_">SimpleCursorAdapter</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCursorAdapter</span><span class="params">(Context context, <span class="type">int</span> layout, Cursor c, String[] from, <span class="type">int</span>[] to)</span> {</span><br><span class="line">        <span class="built_in">super</span>(context, layout, c, from, to);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="/2023/12/14/xiao-mi-bian-qian-wei-hu-kai-fa/search.png" alt="search"></p><h3 id="6、更换背景图片功能"><a href="#6、更换背景图片功能" class="headerlink" title="6、更换背景图片功能"></a>6、更换背景图片功能</h3><p>首先添加item表示图片切换，<code>menu\note_list.xml</code></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/Lisa"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/menu_Lisa"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/Rose"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/menu_Rose"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/Waiwai"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/menu_Waiwai"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/background_default"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"@string/menu_background_default"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后再<code>NoteListActivity</code>中，首先在<code>onCreate</code>方法中，设置默认背景</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getWindow().setBackgroundDrawableResource(R.drawable.background_default);</span><br></pre></td></tr></tbody></table></figure><p>然后添加变量<code>mode</code>用于切换页面，在<code>onOptionsItemSelected</code>方法中设置切换背景</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(itemId == R.id.background_default){</span><br><span class="line">          mode = -<span class="number">2</span>;</span><br><span class="line">          getWindow().setBackgroundDrawableResource(R.drawable.background_default);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(itemId == R.id.Rose){</span><br><span class="line">          mode = -<span class="number">1</span>;</span><br><span class="line">          getWindow().setBackgroundDrawableResource(R.drawable.rose);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(itemId == R.id.Lisa){</span><br><span class="line">          mode = <span class="number">0</span>;</span><br><span class="line">          getWindow().setBackgroundDrawableResource(R.drawable.lisa);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(itemId == R.id.Waiwai){</span><br><span class="line">          mode = <span class="number">1</span>;</span><br><span class="line">          getWindow().setBackgroundDrawableResource(R.drawable.waiwai);</span><br><span class="line">      }</span><br></pre></td></tr></tbody></table></figure><p>最后在<code>onPrepareOptionsMenu</code>设置按键隐藏</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(mode == -<span class="number">1</span>)</span><br><span class="line">     menu.findItem(R.id.Rose).setVisible(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mode == <span class="number">0</span>)</span><br><span class="line">     menu.findItem(R.id.Lisa).setVisible(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mode == <span class="number">1</span>)</span><br><span class="line">     menu.findItem(R.id.Waiwai).setVisible(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(mode == -<span class="number">2</span>)</span><br><span class="line">     menu.findItem(R.id.background_default).setVisible(<span class="literal">false</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="7、插入图片功能"><a href="#7、插入图片功能" class="headerlink" title="7、插入图片功能"></a>7、插入图片功能</h3><p>首先，在<code>note_edit</code>中添加插入图片按钮</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">"@+id/add_img_btn"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_marginLeft</span>=<span class="string">"10dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_marginTop</span>=<span class="string">"500dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_marginBottom</span>=<span class="string">"7dp"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:src</span>=<span class="string">"@android:drawable/ic_menu_gallery"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">tools:ignore</span>=<span class="string">"TouchTargetSizeCheck,SpeakableTextPresentCheck"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>NoteEditActivity</code>中<code>onCreate</code>中为按钮绑定监听器</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id获取添加图片按钮</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ImageButton</span> <span class="variable">add_img_btn</span> <span class="operator">=</span> (ImageButton) findViewById(R.id.add_img_btn);</span><br><span class="line">        <span class="comment">//为点击图片按钮设置监听器</span></span><br><span class="line">        add_img_btn.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View view)</span> {</span><br><span class="line">                Log.d(TAG, <span class="string">"onClick: click add image button"</span>);</span><br><span class="line">                <span class="comment">//ACTION_GET_CONTENT: 允许用户选择特殊种类的数据，并返回（特殊种类的数据：照一张相片或录一段音）</span></span><br><span class="line">                <span class="type">Intent</span> <span class="variable">loadImage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_GET_CONTENT);</span><br><span class="line">                <span class="comment">//Category属性用于指定当前动作（Action）被执行的环境.</span></span><br><span class="line">                <span class="comment">//CATEGORY_OPENABLE; 用来指示一个ACTION_GET_CONTENT的intent</span></span><br><span class="line">                loadImage.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">                loadImage.setType(<span class="string">"image/*"</span>);</span><br><span class="line">                startActivityForResult(loadImage, PHOTO_REQUEST);</span><br><span class="line">            }</span><br><span class="line">        });</span><br></pre></td></tr></tbody></table></figure><p>重写<code>onActivityResult</code>方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onActivityResult</span><span class="params">(<span class="type">int</span> requestCode, <span class="type">int</span> resultCode, Intent intent)</span> {</span><br><span class="line">       <span class="built_in">super</span>.onActivityResult(requestCode, resultCode, intent);</span><br><span class="line">       <span class="type">ContentResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> getContentResolver();</span><br><span class="line">       <span class="keyword">switch</span> (requestCode) {</span><br><span class="line">           <span class="keyword">case</span> PHOTO_REQUEST:</span><br><span class="line">               <span class="type">Uri</span> <span class="variable">originalUri</span> <span class="operator">=</span> intent.getData(); <span class="comment">//1.获得图片的真实路径</span></span><br><span class="line">               <span class="type">Bitmap</span> <span class="variable">bitmap</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">               <span class="keyword">try</span> {</span><br><span class="line">                   bitmap = BitmapFactory.decodeStream(resolver.openInputStream(originalUri));<span class="comment">//2.解码图片</span></span><br><span class="line">               } <span class="keyword">catch</span> (FileNotFoundException e) {</span><br><span class="line">                   Log.d(TAG, <span class="string">"onActivityResult: get file_exception"</span>);</span><br><span class="line">                   e.printStackTrace();</span><br><span class="line">               }</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span>(bitmap != <span class="literal">null</span>){</span><br><span class="line">                   <span class="comment">//3.根据Bitmap对象创建ImageSpan对象</span></span><br><span class="line">                   Log.d(TAG, <span class="string">"onActivityResult: bitmap is not null"</span>);</span><br><span class="line">                   <span class="type">ImageSpan</span> <span class="variable">imageSpan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ImageSpan</span>(NoteEditActivity.<span class="built_in">this</span>, bitmap);</span><br><span class="line">                   <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> getPath(<span class="built_in">this</span>,originalUri);</span><br><span class="line">                   <span class="comment">//4.使用[local][/local]将path括起来，用于之后方便识别图片路径在note中的位置</span></span><br><span class="line">                   String img_fragment= <span class="string">"[local]"</span> + path + <span class="string">"[/local]"</span>;</span><br><span class="line">                   <span class="comment">//创建一个SpannableString对象，以便插入用ImageSpan对象封装的图像</span></span><br><span class="line">                   <span class="type">SpannableString</span> <span class="variable">spannableString</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SpannableString</span>(img_fragment);</span><br><span class="line">                   spannableString.setSpan(imageSpan, <span class="number">0</span>, img_fragment.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);</span><br><span class="line">                   <span class="comment">//5.将选择的图片追加到EditText中光标所在位置</span></span><br><span class="line">                   <span class="type">NoteEditText</span> <span class="variable">e</span> <span class="operator">=</span> (NoteEditText) findViewById(R.id.note_edit_view);</span><br><span class="line">                   <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> e.getSelectionStart(); <span class="comment">//获取光标所在位置</span></span><br><span class="line">                   Log.d(TAG, <span class="string">"Index是: "</span> + index);</span><br><span class="line">                   <span class="type">Editable</span> <span class="variable">edit_text</span> <span class="operator">=</span> e.getEditableText();</span><br><span class="line">                   edit_text.insert(index, spannableString); <span class="comment">//将图片插入到光标所在位置</span></span><br><span class="line"></span><br><span class="line">                   mWorkingNote.mContent = e.getText().toString();</span><br><span class="line">                   <span class="comment">//6.把改动提交到数据库中,两个数据库表都要改的</span></span><br><span class="line">                   <span class="type">ContentResolver</span> <span class="variable">contentResolver</span> <span class="operator">=</span> getContentResolver();</span><br><span class="line">                   <span class="type">ContentValues</span> <span class="variable">contentValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">                   <span class="keyword">final</span> <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> mWorkingNote.getNoteId();</span><br><span class="line">                   contentValues.put(<span class="string">"snippet"</span>,mWorkingNote.mContent);</span><br><span class="line">                   contentResolver.update(Uri.parse(<span class="string">"content://micode_notes/note"</span>), contentValues,<span class="string">"_id=?"</span>,<span class="keyword">new</span> <span class="title class_">String</span>[]{<span class="string">""</span>+id});</span><br><span class="line">                   <span class="type">ContentValues</span> <span class="variable">contentValues1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ContentValues</span>();</span><br><span class="line">                   contentValues1.put(<span class="string">"content"</span>,mWorkingNote.mContent);</span><br><span class="line">                   contentResolver.update(Uri.parse(<span class="string">"content://micode_notes/data"</span>), contentValues1,<span class="string">"mime_type=? and note_id=?"</span>, <span class="keyword">new</span> <span class="title class_">String</span>[]{<span class="string">"vnd.android.cursor.item/text_note"</span>,<span class="string">""</span>+id});</span><br><span class="line"></span><br><span class="line">               }<span class="keyword">else</span>{</span><br><span class="line">                   Toast.makeText(NoteEditActivity.<span class="built_in">this</span>, <span class="string">"获取图片失败"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">               }</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">default</span>:</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">       }</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>获取图片路径</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取文件的real path</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">(<span class="keyword">final</span> Context context, <span class="keyword">final</span> Uri uri)</span> {</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">isKitKat</span> <span class="operator">=</span> Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// DocumentProvider</span></span><br><span class="line">        <span class="keyword">if</span> (isKitKat &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) {</span><br><span class="line">            <span class="keyword">if</span> (isMediaDocument(uri)) {</span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">docId</span> <span class="operator">=</span> DocumentsContract.getDocumentId(uri);</span><br><span class="line">                <span class="keyword">final</span> String[] split = docId.split(<span class="string">":"</span>);</span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> split[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                <span class="type">Uri</span> <span class="variable">contentUri</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"image"</span>.equals(type)) {</span><br><span class="line">                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">selection</span> <span class="operator">=</span> <span class="string">"_id=?"</span>;</span><br><span class="line">                <span class="keyword">final</span> String[] selectionArgs = <span class="keyword">new</span> <span class="title class_">String</span>[]{split[<span class="number">1</span>]};</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> getDataColumn(context, contentUri, selection, selectionArgs);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// Media</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"content"</span>.equalsIgnoreCase(uri.getScheme())) {</span><br><span class="line">            <span class="keyword">return</span> getDataColumn(context, uri, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// File</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"file"</span>.equalsIgnoreCase(uri.getScheme())) {</span><br><span class="line">            <span class="keyword">return</span> uri.getPath();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>判断是否为媒体文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否为媒体文件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isMediaDocument</span><span class="params">(Uri uri)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"com.android.providers.media.documents"</span>.equals(uri.getAuthority());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Current activity may be killed when the memory is low. Once it is killed, for another time</span></span><br><span class="line"><span class="comment">     * user load this activity, we should restore the former state</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onRestoreInstanceState</span><span class="params">(Bundle savedInstanceState)</span> {</span><br><span class="line">        <span class="built_in">super</span>.onRestoreInstanceState(savedInstanceState);</span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState != <span class="literal">null</span> &amp;&amp; savedInstanceState.containsKey(Intent.EXTRA_UID)) {</span><br><span class="line">            <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Intent</span>(Intent.ACTION_VIEW);</span><br><span class="line">            intent.putExtra(Intent.EXTRA_UID, savedInstanceState.getLong(Intent.EXTRA_UID));</span><br><span class="line">            <span class="keyword">if</span> (!initActivityState(intent)) {</span><br><span class="line">                finish();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            }</span><br><span class="line">            Log.d(TAG, <span class="string">"Restoring from killed activity"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>获取列内容</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取数据列_获取此 Uri 的数据列的值。这对MediaStore Uris 和其他基于文件的 ContentProvider。</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getDataColumn</span><span class="params">(Context context, Uri uri, String selection, String[] selectionArgs)</span> {</span><br><span class="line"></span><br><span class="line">       <span class="type">Cursor</span> <span class="variable">cursor</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">String</span> <span class="variable">column</span> <span class="operator">=</span> <span class="string">"_data"</span>;</span><br><span class="line">       <span class="keyword">final</span> String[] projection = {column};</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> {</span><br><span class="line">           cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs, <span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">if</span> (cursor != <span class="literal">null</span> &amp;&amp; cursor.moveToFirst()) {</span><br><span class="line">               <span class="keyword">final</span> <span class="type">int</span> <span class="variable">column_index</span> <span class="operator">=</span> cursor.getColumnIndexOrThrow(column);</span><br><span class="line">               <span class="keyword">return</span> cursor.getString(column_index);</span><br><span class="line">           }</span><br><span class="line">       } <span class="keyword">finally</span> {</span><br><span class="line">           <span class="keyword">if</span> (cursor != <span class="literal">null</span>)</span><br><span class="line">               cursor.close();</span><br><span class="line">       }</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小米便签 </category>
          
          <category> 课程项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android-Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android-Studio配置运行小米便签</title>
      <link href="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/"/>
      <url>/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/</url>
      
        <content type="html"><![CDATA[<h1 id="1-下载Android-Studio"><a href="#1-下载Android-Studio" class="headerlink" title="1.下载Android Studio"></a>1.下载Android Studio</h1><p>官网地址：<a href="https://developer.android.com/studio?gclid=CjwKCAiAmZGrBhAnEiwAo9qHiaAmZJAknbMjCAXFpPN33CkMAJGTXofPVciEwU3JAEeUNVyxTlW6VhoCsIcQAvD_BwE&amp;gclsrc=aw.ds&amp;hl=zh-cn">Android Studio</a></p><p>安装教程：<a href="https://mp.weixin.qq.com/s/pOfQ_KL5tsK_sXFfUfq1vA">Android Studio 安装教程</a></p><p>默认下载即可，选定好<code>SDK</code>的下载地址即可。</p><h2 id="1-1配置-Gradle-地址-建议"><a href="#1-1配置-Gradle-地址-建议" class="headerlink" title="1.1配置 Gradle 地址(建议)"></a>1.1配置 Gradle 地址(建议)</h2><p>在下载之后，可以配置一下Gradle的地址，这样在后续<code>import</code>项目时，出错后，方便修改。</p><p>在<code>Settings -&gt; Build -&gt; Build Tools -&gt; Gradle</code>中可以修改Gradle的仓库地址<br><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/gradle.png" alt="Gradle"></p><h1 id="2-项目-clone"><a href="#2-项目-clone" class="headerlink" title="2.项目 clone"></a>2.项目 clone</h1><p>小米便签项目仓库地址: <a href="https://github.com/MiCode/Notes">小米便签</a></p><p><code>git clone</code> 或者直接直接下载压缩包都可</p><h1 id="3-import-项目"><a href="#3-import-项目" class="headerlink" title="3. import 项目"></a>3. import 项目</h1><p>此处不能新建项目，直接把文件放入Android Studio,会有你意想不到的报错~</p><p>使用<code>import</code>的方式，通过<code>Gradle</code> 的方式编译整个项目。</p><p>在<code>sync</code>的过程中，会有各种各样、莫名其妙的报错，部分报错的解决办法，见第5部分的报错解决</p><p><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/import.png" alt="import"> </p><p>出现如下图所示即为，<code>sync</code>成功<br><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/sync.png" alt="sync"></p><h2 id="3-1-Gradle-项目"><a href="#3-1-Gradle-项目" class="headerlink" title="3.1 Gradle 项目"></a>3.1 Gradle 项目</h2><p>gradle是基于Apache Maven概念的项目自动化构建开源工具。他是使用一种基于groovy的 特定领域语言来声明项目配置，抛弃了基于<code>XML</code>的各种繁琐配置。</p><p>gradle都是基于groovy的，但是由于其提供了一整套DSL，所以在开发gradle脚本时几乎脱离了groovy的感知。我们在这里将gradle当做一个独立的部署工具。</p><p>工作流程：</p><ul><li>解析setting.gradle文件然后去遍历根目录，检查子项目是否满足规定。</li><li>解析每个子project的gradle，然后根据Task去构建项目之间的有向无环图。</li><li>直接执行，涉及到刷新下载依赖，以及build构建发布包等等。</li></ul><h1 id="4-创建虚拟机，运行项目"><a href="#4-创建虚拟机，运行项目" class="headerlink" title="4.创建虚拟机，运行项目"></a>4.创建虚拟机，运行项目</h1><p>在<code>sync</code>结束后，点击右上角的<code>build</code>锤子按钮编译整个项目</p><p>出现如下图所示，即为编译成功</p><p><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/build.png" alt="bulid"></p><p>创建虚拟机，选择<code>Device Manager</code></p><p><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/device.png" alt="device"></p><p>点击<code>create device -&gt; Pixel 2</code></p><p><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/create.png" alt="create"></p><p>选择好镜像，下载即可完成虚拟机的配置</p><p><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/mirror.png" alt="mirror"></p><p>运行项目即可看到小米便签</p><p><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/result.png" alt="result"></p><h1 id="5-报错解决"><a href="#5-报错解决" class="headerlink" title="5.报错解决"></a>5.报错解决</h1><h2 id="5-1-Gradle-xxxxx-not-found-或者-Connect-time-out"><a href="#5-1-Gradle-xxxxx-not-found-或者-Connect-time-out" class="headerlink" title="5.1 Gradle xxxxx not found 或者 Connect time out"></a>5.1 Gradle xxxxx not found 或者 Connect time out</h2><p>修改<code>build.gradle:notes</code>(全局的配置文件)，添加<code>google()</code> 用于加速下载，’classpath’修改为所需要的版本</p><figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Top-level build file where you can add configuration options common to all sub-projects/modules.</span></span><br><span class="line"><span class="keyword">buildscript</span> {</span><br><span class="line">    <span class="keyword">repositories</span> {</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">dependencies</span> {</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">'com.android.tools.build:gradle:8.1.3'</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">allprojects</span> {</span><br><span class="line">    <span class="keyword">repositories</span> {</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改 <code>gradle-wrapper.properties</code>,<code>distributionUrl</code>改为自己需要的版本，将<code>-all</code> 同意修改为<code>-bin</code></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Mon Nov 27 16:26:33 CST 2023</span></span><br><span class="line"><span class="attr">distributionBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">distributionPath</span>=<span class="string">wrapper/dists</span></span><br><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://services.gradle.org/distributions/gradle-8.0-bin.zip</span></span><br><span class="line"><span class="attr">zipStoreBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="attr">zipStorePath</span>=<span class="string">wrapper/dists</span></span><br></pre></td></tr></tbody></table></figure><p>修改后，再次<code>sync</code>,若仍然报错<code>not found</code> ，则去<a href="https://services.gradle.org/distributions/">gradle下载</a>,找到自己对应的版本，下载后，放入你上面配置的gradle地址下<code>\gradle\wrapper\dists</code>下对应的gradle文件夹下面，将其中的其他文件删除，放入下载好的压缩包即可。</p><p>若再次报错，检查自己之前使用<code>idea</code>破解版时，使用的脚本，这些脚本执行后，会生成带中文路径的环境变量，导致报错。执行<code>uninstall</code>脚本文件，然后再次<code>sync</code>，此时大概率是没有问题了。</p><h2 id="5-2-版本不匹配"><a href="#5-2-版本不匹配" class="headerlink" title="5.2 版本不匹配"></a>5.2 版本不匹配</h2><p>版本不匹配问题在报错信息提示中，有明确的指示</p><h3 id="1-JDK版本与Gradle不匹配"><a href="#1-JDK版本与Gradle不匹配" class="headerlink" title="1.JDK版本与Gradle不匹配"></a>1.JDK版本与Gradle不匹配</h3><p><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/jdk.png" alt="jdk"><br>按照需要的版本修改jdk或者gradle，详见gradle官方配置文档。(推荐修改JDK)</p><h3 id="2-compileSdkVersion与targetSdkVersion版本不一致"><a href="#2-compileSdkVersion与targetSdkVersion版本不一致" class="headerlink" title="2.compileSdkVersion与targetSdkVersion版本不一致"></a>2.compileSdkVersion与targetSdkVersion版本不一致</h3><p>设置为一致即可</p><figure class="highlight gradle"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android {</span><br><span class="line">    namespace <span class="string">"net.micode.notes"</span></span><br><span class="line">    useLibrary <span class="string">'org.apache.http.legacy'</span></span><br><span class="line">    compileSdkVersion <span class="number">30</span></span><br><span class="line">    buildToolsVersion <span class="string">"34.0.0"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig {</span><br><span class="line">        applicationId <span class="string">"net.micode.notes"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">30</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    buildTypes {</span><br><span class="line">        release {</span><br><span class="line">            minifyEnabled <span class="keyword">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.txt'</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> {</span><br><span class="line">    implementation files(<span class="string">'D:\\Maven\\http-client\\httpclient-4.5.5.jar'</span>)</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="5-3-httpclient报错"><a href="#5-3-httpclient报错" class="headerlink" title="5.3 httpclient报错"></a>5.3 httpclient报错</h2><p>此处报错问题是由于项目中缺少<code>httpclient</code>依赖,去<a href="https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient/4.5.5">maven仓库</a>下载<code>jar</code>包，导入即可。</p><p><code>Files -&gt; Project Structure -&gt; Dependency</code></p><p><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/jar.png" alt="jar"></p><h2 id="5-4-switch-case中-R-id-报错"><a href="#5-4-switch-case中-R-id-报错" class="headerlink" title="5.4 switch case中 R.id 报错"></a>5.4 switch case中 R.id 报错</h2><p>将普通<code>Android</code>工程转成<code>Library</code>工程后,常量发生变化</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Library工程的R文件</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> gift_pop_hide=<span class="number">0x7f04000f</span>;</span><br><span class="line"><span class="comment">//普通工程的的R文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> abc_fade_in=<span class="number">0x7f040000</span>;</span><br></pre></td></tr></tbody></table></figure><p>由于Library工程的可以包含资源文件，编译会生成R文件，多个Library中可能出现id冲突的问题。为了解决这个问题谷歌将Library工程R文件才从静态常量变为非常量。</p><p>然而switch语句的case中 必须是常量，而此时的R.id.xxx为非常量，所以报错了。</p><p>修改switch语句为if else语句。Android studio中提供快速切换方法。如下：</p><p>选中“switch”，ALt+Enter同时选中，弹出对话框，选择“Replace ‘switch’ with ‘if’” </p><p><img src="/2023/11/28/android-studio-pei-zhi-yun-xing-xiao-mi-bian-qian/switch.png" alt="switch"></p><h2 id="5-5-Cannot-resolve-method-‘setLatestEventInfo’-in-‘Notification’"><a href="#5-5-Cannot-resolve-method-‘setLatestEventInfo’-in-‘Notification’" class="headerlink" title="5.5 Cannot resolve method ‘setLatestEventInfo’ in ‘Notification’"></a>5.5 <code>Cannot resolve method ‘setLatestEventInfo’ in ‘Notification’</code></h2><p>原因：在低于API Level 11版本，也就是Android 2.3.3以下的系统中，setLatestEventInfo()函数是唯一的实现方法；而在高于API Level 11的版本中setLatestEventInfo()函数已经被弃用了，于是我们需要根据现有的Android版本进行相应地重写该函数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">showNotification</span><span class="params">(<span class="type">int</span> tickerId, String content)</span> {</span><br><span class="line">        PendingIntent pendingIntent;</span><br><span class="line">        <span class="keyword">if</span> (tickerId != R.string.ticker_success) {</span><br><span class="line">            pendingIntent = PendingIntent.getActivity(mContext, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">Intent</span>(mContext,</span><br><span class="line">                    NotesPreferenceActivity.class), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            pendingIntent = PendingIntent.getActivity(mContext, <span class="number">0</span>, <span class="keyword">new</span> <span class="title class_">Intent</span>(mContext,</span><br><span class="line">                    NotesListActivity.class), <span class="number">0</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Notification.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Notification</span>.Builder(mContext)</span><br><span class="line">                .setAutoCancel(<span class="literal">true</span>)</span><br><span class="line">                .setContentTitle(mContext.getString(R.string.app_name))</span><br><span class="line">                .setContentText(content)</span><br><span class="line">                .setContentIntent(pendingIntent)</span><br><span class="line">                .setWhen(System.currentTimeMillis())</span><br><span class="line">                .setOngoing(<span class="literal">true</span>);</span><br><span class="line">        Notification notification=builder.getNotification();</span><br><span class="line">        mNotifiManager.notify(GTASK_SYNC_NOTIFICATION_ID, notification);</span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="5-6-小米菜单栏无法显示"><a href="#5-6-小米菜单栏无法显示" class="headerlink" title="5.6 小米菜单栏无法显示"></a>5.6 小米菜单栏无法显示</h2><p>只需修改<code>res/values/styles.xml</code>最后一部分如下即可。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"NoteActionBarStyle"</span> <span class="attr">parent</span>=<span class="string">"@android:style/Widget.Holo.Light.ActionBar.Solid"</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- &lt;item name="android:displayOptions" /&gt;--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:visibility"</span>&gt;</span>visible<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小米便签 </category>
          
          <category> 课程项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android-Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赎金信</title>
      <link href="/2023/10/23/shu-jin-xin/"/>
      <url>/2023/10/23/shu-jin-xin/</url>
      
        <content type="html"><![CDATA[<h1 id="赎金信"><a href="#赎金信" class="headerlink" title="赎金信"></a>赎金信</h1><p><a href="https://leetcode.cn/problems/ransom-note/description/">赎金信</a></p><p>此题采用数组解法，只需分别遍历两个数组，记录各元素出现次数即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> {</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ransomNote.length() &gt; magazine.length() )</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] maga = magazine.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;magazine.length();i++){</span><br><span class="line">            res[maga[i] - <span class="string">'a'</span>]++;</span><br><span class="line">        }</span><br><span class="line">        <span class="type">char</span>[] ran = ransomNote.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;ransomNote.length();i++ ){</span><br><span class="line">            res[ran[i] - <span class="string">'a'</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(res[ran[i] - <span class="string">'a'</span>] &lt; <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四数之和</title>
      <link href="/2023/10/22/si-shu-zhi-he/"/>
      <url>/2023/10/22/si-shu-zhi-he/</url>
      
        <content type="html"><![CDATA[<h1 id="四数之和"><a href="#四数之和" class="headerlink" title="四数之和"></a>四数之和</h1><p><a href="https://leetcode.cn/problems/4sum-ii/">四数之和</a></p><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>此题是从四个数组中寻找相加为0的四个数，其中会有重复出现可能，所以可以使用 <code>Map</code> 哈希法来解决。</p><p><code>key</code> 存放前两个数组<code>a+b</code>的值，<code>value</code>存储<code>a+b</code>出现的次数。</p><p>先遍历前两个数组，存储<code>a+b</code>的值和出现的次数。</p><p>再遍历剩下两个数组，寻找 <code>0-c-d</code> 是否在<code>map</code>中出现，使 <code>res</code>加上 出现的次数，即可获得答案。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> {</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 寻找 a+b</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> a : nums1){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> b : nums2){</span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> a+b;</span><br><span class="line">                map.put(sum, map.getOrDefault(sum,<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//寻找 0-c-d</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cnt</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> c : nums3){</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> d : nums4){</span><br><span class="line">                cnt += map.getOrDefault(<span class="number">0</span>-c-d,<span class="number">0</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot跨域访问配置</title>
      <link href="/2023/10/21/springboot-kua-yu-fang-wen-pei-zhi/"/>
      <url>/2023/10/21/springboot-kua-yu-fang-wen-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot跨域访问"><a href="#SpringBoot跨域访问" class="headerlink" title="SpringBoot跨域访问"></a>SpringBoot跨域访问</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>当我们在进行前后端开发时，经常会需要在前端接收来自后端的不同端口传输的信息，此时便需要用到跨域访问。</p><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>跨域是指跨域名的访问，以下情况都属于跨域：</p><ul><li>域名不同<a href="http://www.baidu.com/">www.baidu.com</a> 与 <a href="http://www.taobao.com/">www.taobao.com</a></li><li>域名相同，端口不同<a href="http://www.baidu.com:8080/">www.baidu.com:8080</a> 与 <a href="http://www.baidu.com:8081/">www.baidu.com:8081</a></li><li>二级域名不同shawni.jd.com 与 ran.jd.com</li></ul><h2 id="Config-配置类"><a href="#Config-配置类" class="headerlink" title="Config 配置类"></a>Config 配置类</h2><p>解决跨域问题，既可以在前端，也可以在后端，我们在实际开发场景中，通常在后端配置一个跨域配置类，指定可跨域请求的路径。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前跨域请求最大有效时长。这里默认1天</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">MAX_AGE</span> <span class="operator">=</span> <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> {</span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">corsConfiguration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">"*"</span>); <span class="comment">// 1 设置访问源地址</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">"*"</span>); <span class="comment">// 2 设置访问源请求头</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">"*"</span>); <span class="comment">// 3 设置访问源请求方法</span></span><br><span class="line">        corsConfiguration.setMaxAge(MAX_AGE);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">"/**"</span>, corsConfiguration); <span class="comment">// 4 对接口配置跨域设置</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(source);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成SwaggerUI</title>
      <link href="/2023/10/21/springboot-ji-cheng-swaggerui/"/>
      <url>/2023/10/21/springboot-ji-cheng-swaggerui/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot集成Swagger3"><a href="#SpringBoot集成Swagger3" class="headerlink" title="SpringBoot集成Swagger3"></a>SpringBoot集成Swagger3</h1><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>在开发时，我们经常会面对对接口的测试。而 Swagger 是一个在线 api框架，能够在线测试我们的api接口。同时是支持RESTfui 风格接口测试。</p><h2 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Config-配置类"><a href="#Config-配置类" class="headerlink" title="Config 配置类"></a>Config 配置类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableOpenApi</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">swaggerConfig</span> {</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建API应用</span></span><br><span class="line"><span class="comment">     * apiInfo() 增加API相关信息</span></span><br><span class="line"><span class="comment">     * 通过select()函数返回一个ApiSelectorBuilder实例,用来控制哪些接口暴露给Swagger来展现，</span></span><br><span class="line"><span class="comment">     * 本例采用指定扫描的包路径来定义指定要建立API的目录。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">restApi</span><span class="params">()</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">"标准接口"</span>)</span><br><span class="line">                .apiInfo(apiInfo(<span class="string">"Spring Boot中使用Swagger3构建RESTful APIs"</span>, <span class="string">"1.0"</span>))</span><br><span class="line">                .useDefaultResponseMessages(<span class="literal">true</span>)</span><br><span class="line">                .forCodeGeneration(<span class="literal">false</span>)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.shawni.manager.controller"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建该API的基本信息（这些基本信息会展现在文档页面中）</span></span><br><span class="line"><span class="comment">     * 访问地址：http://ip:port/swagger-ui/index.html</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">(String title, String version)</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(title)</span><br><span class="line">                .description(<span class="string">"Swagger3"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"https://Shawnicsc.github.io"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">"shawni's Blog"</span>, <span class="string">"https://Shawnicsc.github.io"</span>, <span class="string">"shawni@firefox.com"</span>))</span><br><span class="line">                .version(version)</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Swagger3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两数之和(集合版)</title>
      <link href="/2023/10/20/liang-shu-zhi-he-ji-he-ban/"/>
      <url>/2023/10/20/liang-shu-zhi-he-ji-he-ban/</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和-集合版"><a href="#两数之和-集合版" class="headerlink" title="两数之和 - 集合版"></a>两数之和 - 集合版</h1><p><a href="https://leetcode.cn/problems/two-sum/description/">两数之和</a></p><p>此题目中，需要判断某数是否存在，且返回下标，我们可以使用 <code>Map</code> 来进行构造。</p><p>在遍历数组时，判断<code>target-nums[i]</code> 的值是否存在于<code>map</code>中，若在，则直接返回，不在，则把该数以及下标加入<code>map</code>中。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) {</span><br><span class="line">       Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">       <span class="keyword">if</span>(nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++){</span><br><span class="line">           <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> target - nums[i];</span><br><span class="line">           <span class="keyword">if</span>(map.containsKey(temp)){</span><br><span class="line">               res[<span class="number">0</span>] = i;</span><br><span class="line">               res[<span class="number">1</span>] = map.get(temp);</span><br><span class="line">           }</span><br><span class="line">           <span class="keyword">else</span>{</span><br><span class="line">               map.put(nums[i],i);</span><br><span class="line">           }</span><br><span class="line">       }</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快乐数</title>
      <link href="/2023/10/19/kuai-le-shu/"/>
      <url>/2023/10/19/kuai-le-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="快乐数"><a href="#快乐数" class="headerlink" title="快乐数"></a>快乐数</h1><p>题目地址：<a href="https://leetcode.cn/problems/happy-number/description/">快乐数</a></p><p>题目中，提到了 <code>无限循环</code> ,而每一次需要判断<code>sum</code>是否重复，我们在判断是否有重复元素时，可以使用 Set 集合。</p><p>使用Set 集合，对每一次求得sum进行判断，直到<code>sum==1</code>为止。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> {</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>( n!= <span class="number">1</span> &amp;&amp; !set.contains(n)){</span><br><span class="line">            set.add(n);</span><br><span class="line">            n = getSum(n);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//求一个数各个位置平方和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span> n )</span>{</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n&gt;<span class="number">0</span>){</span><br><span class="line">            sum += (n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">            n/=<span class="number">10</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个数组的交集</title>
      <link href="/2023/10/17/liang-ge-shu-zu-de-jiao-ji/"/>
      <url>/2023/10/17/liang-ge-shu-zu-de-jiao-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="两个数组的交集"><a href="#两个数组的交集" class="headerlink" title="两个数组的交集"></a>两个数组的交集</h1><p><a href="https://leetcode.cn/problems/intersection-of-two-arrays/description/">两个数组的交集</a></p><h2 id="1-数组解法"><a href="#1-数组解法" class="headerlink" title="1.数组解法"></a>1.数组解法</h2><p>创建一个数组存储出现过的数字，遍历两个数组，遇到值就 ++ 。</p><p>有重复的元素的值指向的值会 &gt; 2</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) {</span><br><span class="line">        Arrays.sort(nums1);</span><br><span class="line">        Arrays.sort(nums2);</span><br><span class="line">        <span class="comment">//求出数组中最大值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums1[nums1.length-<span class="number">1</span>] &gt; nums2[nums2.length-<span class="number">1</span>] ? nums1[nums1.length-<span class="number">1</span>] : nums2[nums2.length-<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[max+<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums1){</span><br><span class="line">            <span class="keyword">if</span>(res[i] == <span class="number">0</span>) <span class="comment">//避免重复元素出现</span></span><br><span class="line">                res[i]++;</span><br><span class="line">        }       </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums2){</span><br><span class="line">            <span class="keyword">if</span>(res[i] == <span class="number">1</span>){</span><br><span class="line">                res[i]++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i&lt;res.length;i++){</span><br><span class="line">            <span class="keyword">if</span>(res[i] == <span class="number">2</span>){</span><br><span class="line">                list.add(i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[list.size()];</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Integer i : list){</span><br><span class="line">            ans[index++] = i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-set解法"><a href="#2-set解法" class="headerlink" title="2. set解法"></a>2. set解法</h2><p>创建两个Set集合，先遍历第一个数组，将值 <code>add</code> 进去</p><p>紧接着，遍历第二个数组，利用Set的<code>contains</code>方法，在遍历第二个数组时，判断元素是否在第一个数组中出现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) {</span><br><span class="line">       <span class="keyword">if</span>(nums1.length ==<span class="number">0</span> || nums2.length == <span class="number">0</span> || nums1 == <span class="literal">null</span> || nums2 == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line">        Set&lt;Integer&gt; res = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i: nums1)</span><br><span class="line">            set.add(i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : nums2){</span><br><span class="line">            <span class="keyword">if</span>(set.contains(i))</span><br><span class="line">                res.add(i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set 直接转 int数组</span></span><br><span class="line">        <span class="keyword">return</span> res.stream().mapToInt(Integer::intValue).toArray();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有效的字母异位词</title>
      <link href="/2023/10/16/you-xiao-de-zi-mu-yi-wei-ci/"/>
      <url>/2023/10/16/you-xiao-de-zi-mu-yi-wei-ci/</url>
      
        <content type="html"><![CDATA[<h1 id="有效的字母异位词"><a href="#有效的字母异位词" class="headerlink" title="有效的字母异位词"></a>有效的字母异位词</h1><p><a href="https://leetcode.cn/problems/valid-anagram/description/">有效的字母异位词</a></p><h2 id="Hash-集合"><a href="#Hash-集合" class="headerlink" title="Hash 集合"></a>Hash 集合</h2><ul><li>数组</li><li>HashSet</li></ul><p><code>HashSet</code> 是基于 <code>HashMap</code> 开发出来的集合，允许有 <code>null</code> 值，但不允许有重复元素存在。</p><ul><li>HashMap</li></ul><p><code>HashMap</code> 是一个散列表，存储结构为 <code>key--value</code>。</p><h3 id="Hash-表的底层原理"><a href="#Hash-表的底层原理" class="headerlink" title="Hash 表的底层原理"></a>Hash 表的底层原理</h3><p><code>Hash</code> 表存储结构，存储的是值用过 <code>hash</code> 算法算出来的 <code>HashCode</code> ，将 <code>HashCode</code> 值存储在Hash表中，所以hash表是无序的，查找时间消耗为O(1);</p><h3 id="Hash-碰撞"><a href="#Hash-碰撞" class="headerlink" title="Hash 碰撞"></a>Hash 碰撞</h3><p>当有两个元素要插入 <code>hash表</code> 同一位置时，此时称这种情况为 <code>hash碰撞</code></p><p>解决方法：</p><ol><li>拉链法：即设立 <code>hash表</code> 时，使表长度尽可能满足需求。</li><li>线性探测：当碰撞时，后者向下探寻到没有被使用的空间，存储在第一个寻找到的空间中。</li></ol><h2 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h2><p>此题就是验证两个字符串是不是由相同的字母根据不同顺序构成。使用一个判断数组即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> {</span><br><span class="line">        <span class="keyword">if</span>(s.length() != t.length())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span>[] str1 = s.toCharArray();</span><br><span class="line">        <span class="type">char</span>[] str2 = t.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : str1){</span><br><span class="line">            res[c-<span class="string">'a'</span>]++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : str2){</span><br><span class="line">            res[c-<span class="string">'a'</span>]--;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i : res){</span><br><span class="line">            <span class="keyword">if</span>(i != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> Hash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>螺旋矩阵</title>
      <link href="/2023/10/15/luo-xuan-ju-zhen/"/>
      <url>/2023/10/15/luo-xuan-ju-zhen/</url>
      
        <content type="html"><![CDATA[<h1 id="螺旋矩阵"><a href="#螺旋矩阵" class="headerlink" title="螺旋矩阵"></a>螺旋矩阵</h1><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/description/">螺旋矩阵</a></p><p>螺旋矩阵，此类题目考察的是对变化过程的模拟。</p><p><img src="/2023/10/15/luo-xuan-ju-zhen/lx.png" alt="变化过程图"></p><ul><li>上层 由左往右到最后一格前</li><li>右层 从上往下</li><li>下层 由右往左</li><li>左层 由下往上</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[][] generateMatrix(<span class="type">int</span> n) {</span><br><span class="line">        <span class="type">int</span>[][] res = <span class="keyword">new</span> <span class="title class_">int</span>[n][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">loop</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i,j;</span><br><span class="line">        <span class="keyword">while</span>(loop++ &lt; n/<span class="number">2</span>){</span><br><span class="line">            <span class="comment">// 模拟上层从左到右</span></span><br><span class="line">            <span class="keyword">for</span>(j = start ; j&lt; n-loop ; j++){</span><br><span class="line">                res[start][j] = num++;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//模拟右侧从上到下</span></span><br><span class="line">            <span class="keyword">for</span>(i = start ; i &lt; n-loop ; i++){</span><br><span class="line">                res[i][j] = num++; </span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 模拟下层 由右往左</span></span><br><span class="line">            <span class="keyword">for</span>( ; j &gt;= loop; j--){</span><br><span class="line">                res[i][j] = num++;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//模拟左侧 由下到上</span></span><br><span class="line">            <span class="keyword">for</span>(;i &gt;= loop ; i--){</span><br><span class="line">                res[i][j]=num++;</span><br><span class="line">            }</span><br><span class="line">            start++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)</span><br><span class="line">            res[start][start] = num;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有序数组的平方</title>
      <link href="/2023/10/15/you-xu-shu-zu-de-ping-fang/"/>
      <url>/2023/10/15/you-xu-shu-zu-de-ping-fang/</url>
      
        <content type="html"><![CDATA[<h1 id="有序数组的平方"><a href="#有序数组的平方" class="headerlink" title="有序数组的平方"></a>有序数组的平方</h1><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">有序数组的平方</a></p><p>此题目使用快慢指针法，一个指针指向数组开头，一个指针指向数组末尾。</p><p>因为是有序数组，最大值不是在左边，就是在右边，不会在中间。</p><p>使用快慢指针，可以得出 </p><p>如果<code>A[i] * A[i] &lt; A[j] * A[j]</code> 那么<code>result[k--] = A[j] * A[j]</code>;</p><p>如果<code>A[i] * A[i] &gt;= A[j] * A[j]</code> 那么<code>result[k--] = A[i] * A[i]</code>;</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) {</span><br><span class="line">        <span class="keyword">if</span>(nums.length == <span class="number">1</span>){</span><br><span class="line">            nums[<span class="number">0</span>] = nums[<span class="number">0</span>]*nums[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">return</span> nums;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> k=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span>[] res = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">while</span>(k &gt;= <span class="number">0</span>){</span><br><span class="line">            <span class="keyword">if</span>(nums[i]*nums[i] &lt; nums[j]*nums[j]){</span><br><span class="line">                res[k--] = nums[j]*nums[j];</span><br><span class="line">                j--;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(nums[i]*nums[i] &gt;= nums[j]*nums[j] ){</span><br><span class="line">                res[k--] = nums[i]*nums[i];</span><br><span class="line">                i++;</span><br><span class="line">            }</span><br><span class="line">        }    </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>长度最小的子数组</title>
      <link href="/2023/10/15/chang-du-zui-xiao-de-zi-shu-zu/"/>
      <url>/2023/10/15/chang-du-zui-xiao-de-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<h1 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h1><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">长度最小的子数组</a></p><h2 id="滑动窗口法"><a href="#滑动窗口法" class="headerlink" title="滑动窗口法"></a>滑动窗口法</h2><p>滑动窗口类似于双指针法，也是使用双指针，但是类似一个窗口根据不同条件在原数组上滑动。</p><p>滑动窗口的确定主要三点:</p><ul><li>窗口内是什么？</li><li>如何移动窗口的起始位置？</li><li>如何移动窗口的结束位置？</li></ul><p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。</p><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span>[] nums)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">subLength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(;right&lt; nums.length;right++){</span><br><span class="line">            sum += nums[right];</span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target){</span><br><span class="line">                subLength = right - left +<span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 寻找最小区间</span></span><br><span class="line">                result = result &lt; subLength ? result : subLength;</span><br><span class="line">                <span class="comment">//起始位置往前缩小</span></span><br><span class="line">                sum -= nums[left++];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 若 result未被赋值，则取0</span></span><br><span class="line">        <span class="keyword">return</span> result == Integer.MAX_VALUE ? <span class="number">0</span> : result;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="滑动窗口求解模版"><a href="#滑动窗口求解模版" class="headerlink" title="滑动窗口求解模版"></a>滑动窗口求解模版</h2><p>最小滑窗模板：给定数组 nums，定义滑窗的左右边界 i, j，求满足某个条件的滑窗的最小长度。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> j &lt; (nums.length):</span><br><span class="line">    <span class="comment">//判断[i, j]是否满足条件</span></span><br><span class="line">    <span class="keyword">while</span> (满足条件)：</span><br><span class="line">        <span class="comment">//更新结果</span></span><br><span class="line">        i += <span class="number">1</span> <span class="comment">//最大程度的压缩i，使得滑窗尽可能的小</span></span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>最大滑窗模板：给定数组 nums，定义滑窗的左右边界 i, j，求满足某个条件的滑窗的最大长度。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (j &lt; nums.length):</span><br><span class="line">    <span class="comment">//判断[i, j]是否满足条件</span></span><br><span class="line">    <span class="keyword">while</span> (不满足条件)：</span><br><span class="line">        i += <span class="number">1</span> <span class="comment">//保守的压缩i，一旦满足条件了就退出压缩i的过程</span></span><br><span class="line">    <span class="comment">//更新结果（注意在while外更新！）</span></span><br><span class="line">    j += <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除数组中的元素</title>
      <link href="/2023/10/15/yi-chu-shu-zu-zhong-de-yuan-su/"/>
      <url>/2023/10/15/yi-chu-shu-zu-zhong-de-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="3-移除元素"><a href="#3-移除元素" class="headerlink" title="3. 移除元素"></a>3. 移除元素</h1><p><a href="https://leetcode.cn/problems/remove-element/description/">移除数组中的元素</a></p><h2 id="快慢指针法"><a href="#快慢指针法" class="headerlink" title="快慢指针法"></a>快慢指针法</h2><p>通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。</p><p>使用两个指针，一个快指针用于寻找新数组元素，一个慢指针更新新数组下标位置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">slowIndex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">fastIndex</span> <span class="operator">=</span> <span class="number">0</span>;fastIndex&lt;nums.length ;fastIndex++)</span><br><span class="line">            <span class="keyword">if</span>(val != nums[fastIndex])</span><br><span class="line">                nums[slowIndex++] = nums[fastIndex];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> slowIndex;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2023/10/15/er-fen-cha-zhao/"/>
      <url>/2023/10/15/er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h1 id="2、二分法"><a href="#2、二分法" class="headerlink" title="2、二分法"></a>2、二分法</h1><p>二分法是一种能极大节省查找时间复杂度的算法，使用条件：</p><ol><li>数组为有序数组</li><li>数组中没有重复元素</li></ol><h2 id="2-1-Leetcode-例题"><a href="#2-1-Leetcode-例题" class="headerlink" title="2.1 Leetcode 例题"></a>2.1 Leetcode 例题</h2><p><a href="https://leetcode.cn/problems/binary-search/">二分查找</a></p><p>二分查找此类题目 关键点在于找对区间，找好临界值点，可分为两种情况</p><h3 id="1-区间为左闭右闭类型"><a href="#1-区间为左闭右闭类型" class="headerlink" title="1. 区间为左闭右闭类型"></a>1. 区间为左闭右闭类型</h3><pre><code>此时 ``while left &lt;= right`` 需要取等，因为此时相等时的mid值有意义可以取到，当``nums[mid]&gt;target``时·，``right = mid-1``，因为此时mid下标所指的值一定不等于target所以可以往前再移一位。</code></pre><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length-<span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)</span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">            {</span><br><span class="line">                right = mid-<span class="number">1</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">            {</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-区间为左闭右开类型"><a href="#2-区间为左闭右开类型" class="headerlink" title="2. 区间为左闭右开类型"></a>2. 区间为左闭右开类型</h3><pre><code>此时 ``while left &lt; right`` 需要取等，因为此时相等时的mid值没有意义，当``nums[mid] &gt; target``时·，``right = mid``，这样在下一次比较中，因为右区间为开，mid会被排除在查找区间外</code></pre><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> {</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)</span><br><span class="line">        {</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">            {</span><br><span class="line">                right = mid;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">            {</span><br><span class="line">                left = mid +<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>环形链表</title>
      <link href="/2023/10/15/huan-xing-lian-biao/"/>
      <url>/2023/10/15/huan-xing-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h1><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/description/">环形链表</a></p><p>此题解题思路分为两部分</p><h2 id="1-判断链表中是否有环"><a href="#1-判断链表中是否有环" class="headerlink" title="1. 判断链表中是否有环"></a>1. 判断链表中是否有环</h2><p>可以使用快慢指针法，<code>slow</code> 每次往前走一格，<code>fast</code> 每次往前走两格。这样每次 <code>fast</code> 会比 <code>slow</code> 多走一格，相当于往前去追 <code>slow</code> ，若存在环，则 <code>slow</code> 和 <code>fast</code> 一定会相遇，定义其相遇的节点为 相遇节点 <code>index1</code>。</p><p>可设距离如下图所示，则 <code>slow</code> 走过的距离为 $x+y$ , <code>fast</code> 走过的距离为 $x+y+n(y+z)$，而 <code>fast</code> 走过的距离应该是为 <code>slow</code> 的两倍，所以有 $2*(x+y) = x+y+n(y+z)$</p><p>最后可得 $$x+y = n(y+z)$$</p><p>要寻找的节点是起始节点，也就是要寻找 $x$ 的值，化简上述式子可得 $$x = (n-1)(y+z)+z$$</p><p>当 $n=1$ 时，有 $x = z$，由此可得，我们寻找环起始节点的方法。</p><h2 id="2-寻找环起始节点"><a href="#2-寻找环起始节点" class="headerlink" title="2. 寻找环起始节点"></a>2. 寻找环起始节点</h2><p>判断链表存在环后，需要寻找环的起始节点。此处也是使用双指针法，一个从相遇节点处开始往前移动，一个从head处往前移动，这样到最后两指针相遇位置就会是环的起始节点</p><p><img src="/2023/10/15/huan-xing-lian-biao/huan.png" alt="环"></p>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表相交</title>
      <link href="/2023/10/15/lian-biao-xiang-jiao/"/>
      <url>/2023/10/15/lian-biao-xiang-jiao/</url>
      
        <content type="html"><![CDATA[<h1 id="链表相交"><a href="#链表相交" class="headerlink" title="链表相交"></a>链表相交</h1><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/">链表相交</a></p><h2 id="1-O-n-解法"><a href="#1-O-n-解法" class="headerlink" title="1. O(n) 解法"></a>1. O(n) 解法</h2><p>首先计算出两个链表的长度差，使最长的链表先移动到两链表相同长度之处，再同时往后移动，边移动边比较。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> {</span><br><span class="line">        <span class="keyword">if</span>(headA == <span class="literal">null</span> || headB == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curA</span> <span class="operator">=</span> headA;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curB</span> <span class="operator">=</span> headB;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">cntA</span> <span class="operator">=</span><span class="number">0</span>, cntB=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(curA != <span class="literal">null</span>){</span><br><span class="line">            cntA++;</span><br><span class="line">            curA=curA.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(curB != <span class="literal">null</span>){</span><br><span class="line">            cntB++;</span><br><span class="line">            curB=curB.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        curA = headA;</span><br><span class="line">        curB = headB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cntB &gt; cntA){</span><br><span class="line">            <span class="type">int</span> <span class="variable">tempLen</span> <span class="operator">=</span> cntA;</span><br><span class="line">            cntA = cntB;</span><br><span class="line">            cntB = tempLen;</span><br><span class="line"></span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> curA;</span><br><span class="line">            curA = curB;</span><br><span class="line">            curB = temp; </span><br><span class="line">        }</span><br><span class="line">        <span class="type">int</span> <span class="variable">gap</span> <span class="operator">=</span> cntA -cntB;</span><br><span class="line">        <span class="keyword">while</span>(gap-- &gt; <span class="number">0</span>){</span><br><span class="line">            curA = curA.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(curA!=<span class="literal">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(curA == curB)</span><br><span class="line">                <span class="keyword">return</span> curA;</span><br><span class="line"></span><br><span class="line">            curA = curA.next;</span><br><span class="line">            curB = curB.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-双指针解法"><a href="#2-双指针解法" class="headerlink" title="2. 双指针解法"></a>2. 双指针解法</h2><p>设 A 链表长度为 $a$ , B 链表长度为 $b$ , 二者公共后缀链表长度为 $c$。</p><p>设两个指针 <code>curA</code> ,<code>curB</code> 。</p><p><code>curA</code>先遍历链表 A，再遍历链表 B 至两链表相交节点处。 遍历链表A，经过的长度为 $a$ , 遍历遍历链表 B 至两链表相交节点处，经过的长度为 $b-c$ , 则<code>curA</code>经过的长度为 $$a+(b-c)$$</p><p>同理，<code>curB</code> 先遍历链表 B，再遍历链表 A 至两链表相交节点处。经过的长度为 $$b+(a-c)$$</p><p>显然 $$a+(b-c) = b+(a-c)$$</p><p>所以，如果存在相交节点，则两指针一定会相遇。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curA</span> <span class="operator">=</span> headA;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">curB</span> <span class="operator">=</span> headB;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(curA!=curB){</span><br><span class="line">            curA = curA != <span class="literal">null</span> ? curA.next : headB;</span><br><span class="line">            curB = curB != <span class="literal">null</span> ? curB.next : headA;</span><br><span class="line">        } </span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> curA;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>删除链表的倒数第n个元素</title>
      <link href="/2023/10/15/shan-chu-lian-biao-de-dao-shu-di-n-ge-yuan-su/"/>
      <url>/2023/10/15/shan-chu-lian-biao-de-dao-shu-di-n-ge-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="删除链表的倒数第n个元素"><a href="#删除链表的倒数第n个元素" class="headerlink" title="删除链表的倒数第n个元素"></a>删除链表的倒数第n个元素</h1><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/">删除链表的倒数第n个元素</a></p><p>双指针的经典应用</p><p>fast指针先走 n+1 步（<code>n+1</code> 是使slow指针能指向删除节点的前一个节点），再使<code>fast</code>指针和<code>slow</code>指针同时往前走 直至 <code>fast </code>指针为 <code>null</code>。(当fast指针为空时，即fast走到了链表末尾，此时两指针距离 <code>n+1</code> ，即为倒数第n个元素的前一元素)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> n)</span> {</span><br><span class="line">        <span class="comment">// 创建一个虚拟头节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        cur.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> cur,fast=cur;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// fast 先走 n+1 步</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++){</span><br><span class="line">            fast = fast.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 同时向前走</span></span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span>){</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 删除节点</span></span><br><span class="line">        slow.next = slow.next.next;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cur.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两两交换链表中的元素</title>
      <link href="/2023/10/15/liang-liang-jiao-huan-lian-biao-zhong-de-yuan-su/"/>
      <url>/2023/10/15/liang-liang-jiao-huan-lian-biao-zhong-de-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="两两交换链表中的元素"><a href="#两两交换链表中的元素" class="headerlink" title="两两交换链表中的元素"></a>两两交换链表中的元素</h1><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/">两两交换链表中的元素</a></p><p>采用模拟的方式，添加一个虚拟头节点，进行交换。</p><p><img src="/2023/10/15/liang-liang-jiao-huan-lian-biao-zhong-de-yuan-su/exchange.png" alt="交换顺序"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">        ans.next = head;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> ans;</span><br><span class="line">        ListNode first,temp,second; </span><br><span class="line">        <span class="keyword">while</span>(cur != <span class="literal">null</span> &amp;&amp; cur.next!=<span class="literal">null</span> &amp;&amp; cur.next.next!=<span class="literal">null</span>){</span><br><span class="line">            first = cur.next; <span class="comment">//存储第一个节点</span></span><br><span class="line">            second = cur.next.next; <span class="comment">//存储第二个节点</span></span><br><span class="line">            temp = cur.next.next.next; <span class="comment">// 存储第三个节点</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 交换开始</span></span><br><span class="line">            cur.next = second;</span><br><span class="line">            second.next = first;</span><br><span class="line">            first.next = temp;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更新cur 的位置</span></span><br><span class="line">            cur = first;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans.next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>翻转链表</title>
      <link href="/2023/10/15/fan-zhuan-lian-biao/"/>
      <url>/2023/10/15/fan-zhuan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="翻转链表"><a href="#翻转链表" class="headerlink" title="翻转链表"></a>翻转链表</h1><p><a href="https://leetcode.cn/problems/reverse-linked-list/description/">翻转链表</a></p><p>此题难点在于怎么在原链表基础上，不使用额外空间将链表进行翻转。</p><p>解题思路：</p><p>采用两个指针，一个遍历数组，一个指向前一个指针的前一项，每次改变前一个指针的指向，用temp存储，以便遍历。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> {</span><br><span class="line">        ListNode pre=<span class="literal">null</span> , cur=head;</span><br><span class="line">        <span class="keyword">while</span>(cur!=<span class="literal">null</span>){</span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;</span><br><span class="line">            cur.next = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = temp;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计链表</title>
      <link href="/2023/10/15/she-ji-lian-biao/"/>
      <url>/2023/10/15/she-ji-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h1><p><a href="https://leetcode.cn/problems/design-linked-list/">设计链表</a></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> {</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    Node next;</span><br><span class="line">    Node(){}</span><br><span class="line">    Node(<span class="type">int</span> val){</span><br><span class="line">        <span class="built_in">this</span>.val = val;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> {</span><br><span class="line">    <span class="type">int</span> size; <span class="comment">//存储节点个数</span></span><br><span class="line">    Node head;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> {</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">Node</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> {</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=index;i++){</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cur.val;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> {</span><br><span class="line">        addAtIndex(<span class="number">0</span>,val);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> {</span><br><span class="line">        addAtIndex(size,val);</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="keyword">if</span>(index &gt;size)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span>)</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span> ;i&lt;index;i++)</span><br><span class="line">            cur = cur.next;</span><br><span class="line"></span><br><span class="line">        <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(val);</span><br><span class="line">        node.next = cur.next;</span><br><span class="line">        cur.next = node;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> {</span><br><span class="line">        <span class="keyword">if</span>(index&lt;<span class="number">0</span> || index &gt;= size)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt;index ;i++)</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        </span><br><span class="line">        cur.next = cur.next.next;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移除链表中的元素</title>
      <link href="/2023/10/15/yi-chu-lian-biao-zhong-de-yuan-su/"/>
      <url>/2023/10/15/yi-chu-lian-biao-zhong-de-yuan-su/</url>
      
        <content type="html"><![CDATA[<h1 id="移除链表中的元素"><a href="#移除链表中的元素" class="headerlink" title="移除链表中的元素"></a>移除链表中的元素</h1><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">移除链表中的元素</a><br>移除元素的主要操作是将 </p><ol><li>找到待移除节点的前一个节点node</li><li>将 node 的指针域指向其下下个节点，即 待移除节点的下一个节点</li></ol><p>注意事项：</p><ul><li>有头节点，移除头节点时，需单独分析</li><li>删除重复的值时 使用while循环。</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode {</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() {}</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) { this.val = val; }</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }</span></span><br><span class="line"><span class="comment"> * }</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> {</span><br><span class="line">        <span class="comment">// 删除头节点</span></span><br><span class="line">         <span class="keyword">while</span>(head!=<span class="literal">null</span> &amp;&amp; head.val==val){</span><br><span class="line">            head = head.next;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">root</span> <span class="operator">=</span> head;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(root != <span class="literal">null</span>)</span><br><span class="line">        {   </span><br><span class="line">            <span class="comment">//使用while删除重复的值</span></span><br><span class="line">            <span class="keyword">while</span>(root.next!=<span class="literal">null</span> &amp;&amp; root.next.val == val){</span><br><span class="line">                <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> root.next;</span><br><span class="line">                root.next = temp.next;</span><br><span class="line">            }</span><br><span class="line">            </span><br><span class="line">            root = root.next;</span><br><span class="line">            </span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2-1-添加虚拟头节点"><a href="#2-1-添加虚拟头节点" class="headerlink" title="2.1 添加虚拟头节点"></a>2.1 添加虚拟头节点</h2><p>在删除链表元素时，由于头节点是没有前驱的，所以我们在删除时需要加入许多临界的判断。</p><p>使用虚拟头节点，相当于给头节点加入一个前驱，此时便可直接遍历。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> {</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> {</span><br><span class="line">       <span class="comment">// 创建虚拟头节点</span></span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">       pre.next = head ;</span><br><span class="line"></span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> pre;</span><br><span class="line">       <span class="keyword">while</span>(cur.next != <span class="literal">null</span>){</span><br><span class="line">         <span class="comment">//控制删除重复元素</span></span><br><span class="line">           <span class="keyword">if</span>(cur.next.val == val)</span><br><span class="line">                cur.next = cur.next.next;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cur = cur.next;        </span><br><span class="line">       }</span><br><span class="line">       <span class="type">ListNode</span> <span class="variable">res</span> <span class="operator">=</span> pre.next;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 刷题笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github OAuth 认证登录</title>
      <link href="/2023/10/14/github-oauth-ren-zheng-deng-lu/"/>
      <url>/2023/10/14/github-oauth-ren-zheng-deng-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="Github-OAuth-认证登录"><a href="#Github-OAuth-认证登录" class="headerlink" title="Github OAuth 认证登录"></a>Github OAuth 认证登录</h1><h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>在完成项目时，可能会使用到第三方登录的情况，例如：WeChat、QQ，而Github OAuth 也是其中的一种。</p><p>Github OAuth 是一种基于授权码的认证模式，由github服务器完成授权码的认证和用户信息的传输。其登录模式大致可列为以下几个步骤</p><ol><li>用户点击登录，网站 A 让用户跳转到 GitHub。</li><li>GitHub 要求用户登录，然后询问”A 网站要求获得 xx 权限，你是否同意？”</li><li>用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码。</li><li>A 网站使用授权码，向 GitHub 请求令牌。</li><li>GitHub 返回令牌.</li><li>A 网站使用令牌，向 GitHub 请求用户数据。</li></ol><p>本文旨在介绍Github OAuth的一种简单用法，无需自己搭建服务器，简单调用API，用于自己的项目之中。</p><h2 id="2-前置准备"><a href="#2-前置准备" class="headerlink" title="2. 前置准备"></a>2. 前置准备</h2><p>在正式在项目中使用OAuth API 前，我们需要先创建一个OAuth Application,访问网址 <a href="https://github.com/settings/applications/new">https://github.com/settings/applications/new</a><br><img src="/2023/10/14/github-oauth-ren-zheng-deng-lu/application.png" alt="application"></p><p>在开发环境中，可如下图创建：<br><img src="/2023/10/14/github-oauth-ren-zheng-deng-lu/create.png" alt="create"></p><p>其中<code>Home page URL</code>，根据具体需求创建，<code>Authorization callback URL</code> 根据不同的环境进行修改。</p><p>创建完毕后，我们可以获得两个独特参数，一个是client_id，一个是client_secret</p><h2 id="3-前端设置认证路径"><a href="#3-前端设置认证路径" class="headerlink" title="3. 前端设置认证路径"></a>3. 前端设置认证路径</h2><p>在 登录 按钮处设置一个跳转，跳转至github规定的认证网址，携带你的client_id，以及一些对应的参数。通过此处跳转访问，用户可以获得一个授权码(<code>code</code>)。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/login/oauth/authorize?client_id=(你的client_id)&amp;redirect_uri=http://localhost:8080/callback&amp;scope=user&amp;state=1"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>其中，<code>scope</code> 对应 用户授权范围</p><ul><li><code>user</code> – 用户信息</li><li><code>repo</code> – 用户仓库</li></ul><p><code>state</code> 是一个随意值，用来防止跨站请求伪造攻击。</p><p><code>redirect_uri</code> 是你授权后跳转的网页路径。</p><h2 id="4-用户携带code，去获得令牌"><a href="#4-用户携带code，去获得令牌" class="headerlink" title="4. 用户携带code，去获得令牌"></a>4. 用户携带code，去获得令牌</h2><p>用户携带<code>code</code>和<code>state</code>向github服务器发送一个<code>post</code>请求,获得返回的令牌 access_token</p><p>这里使用<a href="https://square.github.io/okhttp/">okHttp</a> 实现 POST 和 GET 请求的发送,使用 <code>fastJson</code> 处理 <code>json</code> 数据。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">accessTokenProvider</span><span class="params">(AccessToken accessToken)</span>{</span><br><span class="line">       <span class="type">MediaType</span> <span class="variable">mediaType</span> <span class="operator">=</span> MediaType.get(<span class="string">"application/json; charset=utf-8"</span>);</span><br><span class="line">       <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line"></span><br><span class="line">       <span class="type">RequestBody</span> <span class="variable">body</span> <span class="operator">=</span> RequestBody.create(mediaType,JSON.toJSONString(accessToken));</span><br><span class="line">       <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">               .url(<span class="string">"https://github.com/login/oauth/access_token"</span>) <span class="comment">//访问获取access_token的路径</span></span><br><span class="line">               .post(body)</span><br><span class="line">               .build();</span><br><span class="line">           <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute()) {</span><br><span class="line">               <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">               <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> string.split(<span class="string">"&amp;"</span>)[<span class="number">0</span>].split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line">               System.out.println(token);</span><br><span class="line">               <span class="keyword">return</span> token;</span><br><span class="line">           } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           }</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>这里的AccessToken是笔者封装的类，包含此次 POST 请求所需的参数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccessToken</span> {</span><br><span class="line">    <span class="keyword">public</span> String client_id;</span><br><span class="line">    <span class="keyword">public</span> String client_secret;</span><br><span class="line">    <span class="keyword">public</span> String state;</span><br><span class="line">    <span class="keyword">public</span> String redirect_uri;</span><br><span class="line">    <span class="keyword">public</span> String code;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里的参数可以设置为全局的常量，也可写进配置文件。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">github.client.id</span>=<span class="string">你的client_id</span></span><br><span class="line"><span class="attr">github.client.secret</span>=<span class="string">你的client_secret</span></span><br><span class="line"><span class="attr">&lt;!--</span> <span class="string">这里的uri是你获得accesstoken后返回的地址 --&gt;</span></span><br><span class="line"><span class="attr">github.redirect.uri</span>=<span class="string">http://localhost:8080/callback</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-用户携带令牌，获取用户信息"><a href="#5-用户携带令牌，获取用户信息" class="headerlink" title="5. 用户携带令牌，获取用户信息"></a>5. 用户携带令牌，获取用户信息</h2><p>用户得到 <code>access_token</code> 后，为了获取用户信息，需要携带access_token，向 <code>github</code> 服务器发送 GET 请求，从而根据之前设定的 <code>scope</code> 获取对应的信息。</p><p>此处同样使用 <code>okHttp</code> 和 <code>fastJson</code> </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> GithubUser <span class="title function_">userProvider</span><span class="params">(String accessToken)</span>{</span><br><span class="line">        <span class="type">OkHttpClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OkHttpClient</span>();</span><br><span class="line">        <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Request</span>.Builder()</span><br><span class="line">                    .url(<span class="string">"https://api.github.com/user"</span>)</span><br><span class="line">                    .header(<span class="string">"Authorization"</span>, <span class="string">"Bearer "</span> + accessToken)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> client.newCall(request).execute()) {</span><br><span class="line">            <span class="comment">// 获得用户信息</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> response.body().string();</span><br><span class="line">            <span class="comment">//对用户信息进行处理，封装成类</span></span><br><span class="line">            <span class="type">GithubUser</span> <span class="variable">githubUser</span> <span class="operator">=</span> JSON.parseObject(string, GithubUser.class);</span><br><span class="line">            System.out.println(githubUser);</span><br><span class="line">            <span class="keyword">return</span> githubUser;</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="6-Controller-层控制认证"><a href="#6-Controller-层控制认证" class="headerlink" title="6. Controller 层控制认证"></a>6. Controller 层控制认证</h2><p>使用 <code>SpringMVC</code> ，在 <code>controller</code> 实现对第三方登录的控制，以及持久化登录的实现。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@GetMapping("/callback")</span> <span class="comment">// 设置路径和前文获取accesstoken的uri对应</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">callback</span><span class="params">(<span class="meta">@RequestParam(name="code")</span> String code,</span></span><br><span class="line"><span class="params">                       <span class="meta">@RequestParam(name="state")</span> String state,</span></span><br><span class="line"><span class="params">                       HttpServletRequest request,</span></span><br><span class="line"><span class="params">                       HttpServletResponse response)</span>{</span><br><span class="line">    <span class="type">AccessToken</span> <span class="variable">accessToken</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AccessToken</span>();</span><br><span class="line">    accessToken.setCode(code);</span><br><span class="line">    accessToken.setClient_id(clientId);</span><br><span class="line">    accessToken.setClient_secret(clientSecret);</span><br><span class="line">    accessToken.setState(state);</span><br><span class="line">    accessToken.setRedirect_uri(redirectUri);</span><br><span class="line">    <span class="comment">// 获取accessToken</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> githubProvider.accessTokenProvider(accessToken);</span><br><span class="line">    <span class="comment">// 获取用户信息</span></span><br><span class="line">    <span class="type">GithubUser</span> <span class="variable">githubUser</span> <span class="operator">=</span> githubProvider.userProvider(token);</span><br><span class="line">    <span class="keyword">if</span>(githubUser!=<span class="literal">null</span>){</span><br><span class="line">        <span class="comment">//登录成功，插入数据库并设置cookie</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setName(githubUser.getName());</span><br><span class="line">        user.setBio(githubUser.getBio());</span><br><span class="line">        <span class="type">String</span> <span class="variable">Token</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        user.setToken(Token);</span><br><span class="line">        user.setAccountId(githubUser.getId());</span><br><span class="line">        user.setGmtCreate(System.currentTimeMillis());</span><br><span class="line">        user.setGmtModified(user.getGmtCreate());</span><br><span class="line">        userMapper.add(user);</span><br><span class="line">        <span class="comment">//设置cookie，以实现持久化登录</span></span><br><span class="line">        response.addCookie(<span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">"token"</span>,Token));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span>  <span class="string">"redirect:/"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="7、提升-–-TODO"><a href="#7、提升-–-TODO" class="headerlink" title="7、提升 – TODO"></a>7、提升 – TODO</h2><p>由于Github服务器处于外国，在国内访问，有时十分缓慢，即使使用了科学上网的方式，在用户信息传输时，会抛出 <code>SocketTimeOutException</code>。</p><p>看了其他的博客，解决方法是</p><ul><li>在项目中配置全局代理 <code>proxy</code> ，使访问时的速度变快</li><li>增加 <code>Socket</code> 连接和传输超时的时间。</li></ul><p>此处有待实验和解决。</p>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> OAuth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础知识总结</title>
      <link href="/2023/09/28/spring-ji-chu-zhi-shi-zong-jie/"/>
      <url>/2023/09/28/spring-ji-chu-zhi-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="1-IOC–容器"><a href="#1-IOC–容器" class="headerlink" title="1.IOC–容器"></a>1.IOC–容器</h2><h3 id="1-1-应用场景"><a href="#1-1-应用场景" class="headerlink" title="1.1 应用场景"></a>1.1 应用场景</h3><p> IOC – 用于集中封装、组织、管理对象，该技术用于在开发中，降低代码的耦合度，使更新替换的效率更高。</p><p> IOC思想：将开发者主动new 生成对象模式 -&gt; 由IOC工厂统一提供对象的模式</p><p> DI：依赖注入，对于IOC工厂中不同的Bean之间绑定依赖关系 </p><h3 id="1-2-实现方式"><a href="#1-2-实现方式" class="headerlink" title="1.2 实现方式"></a>1.2 实现方式</h3><ol><li><p>通过配置文件的形式实现 Bean的注册</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.IOC.Student"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span> &gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>通过配置文件形式实现 依赖注入</p></li></ol><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"teacher"</span> <span class="attr">class</span>=<span class="string">"com.IOC.Teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"com.IOC.Student"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"teacher"</span> <span class="attr">ref</span>=<span class="string">"teacher"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意点：</p><ul><li><p>注入的类需要先注册为Bean，IOC才能从工厂中找出这个类并注入依赖关系</p></li><li><p>被注入的类必需要重写set方法，以便IOC使用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> {</span><br><span class="line">    <span class="keyword">private</span> Teacher teacher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hello</span><span class="params">()</span>{</span><br><span class="line">        System.out.println(<span class="string">"hello"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacher</span><span class="params">(Teacher teacher)</span>{</span><br><span class="line">        <span class="built_in">this</span>.teacher = teacher;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>使用property标签进行依赖注入，ref-&gt; 注入的类，若注入为常量，则使用value属性</p></li></ul><ol start="3"><li>使用注解开发模式,依赖注入使用<code>autowired</code>注解实现自动装载<figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainConfiguration</span> {</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getStudent</span><span class="params">()</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安全即时通讯系统</title>
      <link href="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/"/>
      <url>/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="一、课程设计目的"><a href="#一、课程设计目的" class="headerlink" title="一、课程设计目的"></a>一、课程设计目的</h1><p>本次课程设计目的是了解大型程序开发设计时所需要的步骤及其基本原则，通过团队分工合作的方式，以实践为过程，认识了软件开发的过程模型和生命周期，并且在程序设计的途中， 充分体会团队合作中沟通交流、合理分工的重要性，学习将分工完成的内容整合形成一个完整的工程。</p><h1 id="二、需求分析"><a href="#二、需求分析" class="headerlink" title="二、需求分析"></a>二、需求分析</h1><h2 id="1、系统功能："><a href="#1、系统功能：" class="headerlink" title="1、系统功能："></a>1、系统功能：</h2><p>我们站在程序使用者的角度，分析出用户所需要的功能，再结合程序设计要求，我们认为该系统需要具备以下功能：通过P2P和C/S混合架构实现即时通讯，通过加解密函数和信息隐写实现安全传输、通过Vue框架实现前端交互界面、通过数据库进行用户管理等等。其中客户端和服务器端的具体功能如下：</p><h3 id="客户端："><a href="#客户端：" class="headerlink" title="客户端："></a>客户端：</h3><p>o 注册：与集中服务器通信完成注册，包括用户名、密码、邮箱</p><p>o 认证登陆：与集中服务器通信完成用户名、口令认证登陆</p><p>o 通信录管理功能，实现对通信录好友的添加、删除</p><p>o 即时通讯功能：实现与通信录好友间的信息发送、接收</p><p>o 透明加解密功能：采用非对称密码体制协商加密秘钥，用对称密码算法进行加解密，实现端到端的透明加解密</p><p>o 信息隐藏功能：实现以图片为载体的透明嵌入提取功能</p><p>o 人机交互界面：</p><h3 id="服务器端："><a href="#服务器端：" class="headerlink" title="服务器端："></a>服务器端：</h3><p>o 用户注册：与用户通信完成注册（做必要的检验）</p><p>o 用户验证：验证用户名和密码</p><p>o 用户公钥提供：用户在发送文件时，与用户通信发送好友的公钥</p><p>o 用户在线状态维护：用户在线时记录保存用户的在线状态、IP地址和端口号</p><p>o 用户在线列表发放：负责向用户发送其好友的在线列表（包括好友用户名、IP地址、端口号）</p><h2 id="2、可靠性要求："><a href="#2、可靠性要求：" class="headerlink" title="2、可靠性要求："></a>2、可靠性要求：</h2><ul><li>服务器和客户端之间的通信是安全的，使用加密技术来保护数据传输。</li><li>系统能够防止未经授权的访问和攻击，例如拒绝服务攻击。</li><li>系统能够确保消息的完整性和不可否认性。</li></ul><h3 id="3、安全保密要求"><a href="#3、安全保密要求" class="headerlink" title="3、安全保密要求:"></a>3、安全保密要求:</h3><ul><li>用户的注册信息，密码妥善保管，对数据库中的密码进行加盐的MD5加密处理，防止泄露，导致用户隐私泄露。</li><li>用户的通信内容被加密，以防止窃听。</li><li>系统应该使用安全的加密算法和协议，以防止被破解。</li><li>系统能够防止信息泄露，例如通过信息隐藏技术来隐藏敏感信息。</li></ul><h1 id="三、详细设计"><a href="#三、详细设计" class="headerlink" title="三、详细设计"></a>三、详细设计</h1><h2 id="系统结构设计"><a href="#系统结构设计" class="headerlink" title="系统结构设计"></a>系统结构设计</h2><p>整体结构设计</p><p>采取了前后端分离式设计模式</p><ol><li>前端使用HTML+CSS+JavaScript搭载了JQuery、WebSocket等技术，通过WebSocket与后端建立实时通信的连接，实现即时通讯功能。HTML负责定义页面结构，CSS负责样式美化，JavaScript负责与用户交互和动态更新页面内容。通过JQuery库，简化了DOM操作和事件处理等任务。WebSocket提供了浏览器与服务器之间的双向通信通道，实现了实时消息传输和即时更新的效果。</li><li>后端使用SSM（Spring+SpringMVC+MyBatis）框架技术，结合Netty等技术，以及使用Tomcat作为项目主服务器，搭建了WebSocket服务器。SSM框架提供了一种优雅简洁的方式来开发和管理后端业务逻辑，Spring提供了依赖注入和面向切面编程等特性，SpringMVC负责处理HTTP请求和路由控制，MyBatis用于数据库访问和数据持久化操作。</li></ol><p>服务器端结构设计：</p><ol><li>WebSocket服务器：使用Netty框架创建一个WebSocket服务器，负责接收和处理客户端的WebSocket连接请求。</li><li>消息处理器：服务器端实现了消息处理器，用于处理从客户端接收到的消息，对消息进行Diffie-Hellman密钥协商分配密钥，以及使用AES加密算法对消息进行加密处理。</li><li>用户管理：服务器端维护了用户管理模块，管理用户的连接状态、群组归属、身份验证、在线状态等信息。</li><li>消息分发：服务器端需要根据用户的连接状态和目标用户来进行消息的分发，使用了订阅-发布模式，将消息发布到相应的主题（单聊、群聊），订阅了该主题的接收者会自动接收到相应的消息。</li><li>持久化存储：对用户信息进行持久化存储管理，通过MySQL关系型数据库对用户实体各属性进行管理。</li><li>用户注册合法性验证：对注册用户的邮箱进行了正则匹配，保证格式正确。</li></ol><p>客户端结构设计：</p><ol><li>WebSocket客户端：使用Java提供的WebSocket客户端库，与服务器端建立WebSocket连接，发送和接收消息。</li><li>用户界面：客户端提供了一个用户界面，用于显示聊天消息、联系人列表等界面元素。</li><li>消息处理器：客户端实现了消息处理器功能，用于处理从服务器端接收到的消息，例如解析消息内容、展示消息等。</li><li>用户身份验证：客户端了提供用户身份验证的机制，确保只有合法用户可以连接和发送消息。</li><li>好友管理：客户端提供了添加好友、删除好友的接口，用于向服务器发出添加好友的POST请求。</li></ol><h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><p>模块功能说明</p><ol><li>注册模块（Register Module）：负责用户注册功能，对用户信息进行检验，检验正确则将用户信息添加到数据库中。</li><li>WebSocket服务器模块 ：通过Netty建立起服务器，与前端WebSocket进行交互，获取连接，实现消息的发送。</li><li>HTTP请求处理模块 ：接收HTTP请求消息，通过判断消息类型，将WebSocket请求交给下一个处理器，而将其他类型的HTTP请求进行处理。</li><li>登录模块(Security Module) ：负责用户登录功能，对登录用户信息进行合法性检测。</li><li>路由拦截模块（Filter Module）：负责拦截用户对消息发送界面和静态资源的直接访问。</li><li>异常处理模块 (Exception Module) ：负责捕获异常，并对异常进行打印处理。</li><li>单聊发送模块（Single Send Module）：处理用户之间的单聊消息发送功能。接收发送方和接收方的用户ID以及消息内容，进行消息的加密和解密处理，使用Diffie-Hellman密钥交换协议进行密钥协商，生成共享秘钥，使用AES算法对消息进行加密，将加密后的消息发送给接收方。</li><li>群聊发送模块（Group Send Module）：处理用户发送的群聊消息。接收发送方的用户ID、群组ID以及消息内容，查询群组信息，将消息发送给群组中的在线成员（除了发送方本身），实现群组内的消息广播功能。</li><li>移除用户模块（Remove User Module）：处理用户退出聊天功能。当用户关闭连接或退出聊天时，从在线用户表中移除该用户的信息，更新在线用户数量。</li><li>文件单聊发送模块（File Single Send Module）：处理用户之间的文件单聊发送功能。接收发送方和接收方的用户ID，文件名、大小、URL等信息，将文件相关信息发送给接收方。</li><li>文件群聊发送模块（File Group Send Module）：处理用户发送的文件群聊消息。接收发送方的用户ID、群组ID，文件名、大小、URL等信息，查询群组信息，将文件相关信息发送给群组中的在线成员（除了发送方本身）。</li><li>消息类型错误模块（Type Error Module）：处理消息类型错误的情况，给客户端返回错误提示信息。</li><li>持久层数据管理模块（MySQL Mapper Module）：负责和数据库进行交互，实现对持久层数据的管理。</li></ol><p>模块核心算法设计（要求有流程图）</p><p>消息发送模块</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/4.png"></p><p>登录注册模块</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/5.png"></p><p>WebSocket 连接模块</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/6.png"><br>添加/删除好友模块</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/7.png"></p><h2 id="重要数据结构设计"><a href="#重要数据结构设计" class="headerlink" title="重要数据结构设计"></a>重要数据结构设计</h2><h3 id="1-User类"><a href="#1-User类" class="headerlink" title="1.User类"></a>1.User类</h3><p>user类是我们用于管理在通讯系统中的用户的类，其定义如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String userId;<span class="comment">//用户的唯一身份标识</span></span><br><span class="line"><span class="keyword">private</span> String username;<span class="comment">//用户的用户名</span></span><br><span class="line"><span class="keyword">private</span> String password;<span class="comment">//用户的密码</span></span><br><span class="line"><span class="keyword">private</span> String avatarUrl;<span class="comment">//用户的头像地址，在此次我们均使用相同的地址</span></span><br><span class="line"><span class="keyword">private</span> List&lt;UserInfo&gt; friendList;<span class="comment">//好友列表</span></span><br><span class="line"><span class="keyword">private</span> List&lt;GroupInfo&gt; groupList;<span class="comment">//所在群组的列表</span></span><br></pre></td></tr></tbody></table></figure><p>针对此数据结构我们设计了针对性的数据库，其中有UserId，username，Password三个列，分别对应上文的三个同名属性。其中userId为主键。关于两个列表类，即好友列表和群组列表我们无法将其存放在一个表中，遂新建两个表来存放给群组数据以及好友数据。</p><h3 id="2-Group类"><a href="#2-Group类" class="headerlink" title="2.Group类"></a>2.Group类</h3><p>接下来是我们的Group类，这个类我们将其用作记录小组的信息，这个类的属性比较简单，只有唯一的groupId为主键，以及groupname，groupname由groupId生成，故没有标识出来；再加上一个由user类组成的列表，作为成员列表。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String groupId;</span><br><span class="line"><span class="keyword">private</span> String groupName;</span><br><span class="line"><span class="keyword">private</span> String groupAvatarUrl;</span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; members;</span><br></pre></td></tr></tbody></table></figure><p>其中在数据库的设计方面，我们采用了第三范式的设计思路有效地降低冗余度，数据库由三个表组成；分别是：user，frineds和groups表。其中friends表只有user_Id和friend_Id两个列，userId作为主键，同时friednId和userId都被user表的userId作为外键所限制。group表同样如此，只有groupId和userId对应。</p><p>还有一个ResponseJson类，其属性较为特殊，是信息的状态，有成功和失败几种。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SUCCESS_STATUS</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">ERROR_STATUS</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SUCCESS_MSG</span> <span class="operator">=</span> <span class="string">"一切正常"</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="程序函数清单"><a href="#程序函数清单" class="headerlink" title="程序函数清单"></a>程序函数清单</h2><p>函数名——所在文件名</p><p>RegisterServlet，所在文件名registerservlet。</p><p>函数功能</p><p>完成用户注册功能以及用户密码加盐值</p><p>参数说明</p><p>传入的参数分别为userEmail ， username以及password，都由前端传入</p><p>算法描述</p><p>我们在这里使用了try with resource来进行变量创建，这样进行查询的时候就能由java自己处理异常以及自动进行回收</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/2.png"></p><p>singlesend-文件名chatserviceimpl</p><p>函数功能是进行聊天内容的实现，我们首先将chatservice做成了接口然后分别来进行实现。</p><p>参数说明：JSONObject param, ChannelHandlerContext ctx</p><p>分别是json的对象和一个通道处理文件，来对通道进行处理。</p><p>算法描述</p><p>我们首先进行密钥分发和加密，对在互联网上传播的信息是进行加密传输的，然后将其放入websocket中传输到待接收端。</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/1.png"></p><h1 id="四、系统设计难点与亮点"><a href="#四、系统设计难点与亮点" class="headerlink" title="四、系统设计难点与亮点"></a>四、系统设计难点与亮点</h1><h2 id="1、后端服务器实现即时通讯"><a href="#1、后端服务器实现即时通讯" class="headerlink" title="1、后端服务器实现即时通讯"></a>1、后端服务器实现即时通讯</h2><p>&nbsp;&nbsp;（1）本系统的后端服务器使用Java SSM框架（Spring+SpringMVC+MyBatis）实现前后端解耦，开发独立性高，更加灵活和轻量化，与数据库的连接代码简洁；各个功能之间层次分明，便于后续对功能的增加、删除与修改，有较高的可移植性、可拓展性和可维护性。</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/3.png"></p><p>&nbsp;&nbsp;（2）使用Netty轻量化服务器，其高并发、传输快、封装好的特性减少了socket传输过程的冗余操作；通过配置TCP-NODELAY 使得尽可能发送大块数据，减少充斥的小块数据，减少不必要的网络流量交换与延迟。</p><p>（3）开启心跳包机制，即客户端、服务端建立连接处于ESTABLISHED状态，若超过2小时没有交流，机制就会被启动，保证实时检测，实现长连接的维持和保活。</p><h2 id="2、通过加解密与信息隐写实现的安全传输"><a href="#2、通过加解密与信息隐写实现的安全传输" class="headerlink" title="2、通过加解密与信息隐写实现的安全传输"></a>2、通过加解密与信息隐写实现的安全传输</h2><p>（1）使用Diffie-Hellman密钥交换协议，通过Netty的ChannelHandleContext 传输密钥，并使用AES对称加密对内容进行加解密，实现信息的安全传输。</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/8.png"></p><p>（2）除了传输文字消息，本系统还能进行文件、图片等多种格式内容的传输，使用户功能更加方便和多样。</p><p>&nbsp;&nbsp;（3）设计数据库时，将用户密码进行加密存储，提高用户信息安全性。</p><h2 id="3、通过CSS，HTML，JS实现的前端人机交互界面"><a href="#3、通过CSS，HTML，JS实现的前端人机交互界面" class="headerlink" title="3、通过CSS，HTML，JS实现的前端人机交互界面"></a>3、通过CSS，HTML，JS实现的前端人机交互界面</h2><p>&nbsp;&nbsp;本系统配置了jQuery，使用websocket 实现对Netty服务器的监听和传输，并通过HTML+CSS+JavaScript实现前端的人机交互界面，美观便捷地向用户提供了操作界面。其中注册界面、登录界面和通讯系统主界面实现了自动跳转，其中注册时设置了邮箱差错检测，通讯系统界面可以实现添加删除好友功能、群聊功能、发送emoji功能、传输文件功能等多种丰富便捷的通讯功能。</p><h1 id="五、设计成果"><a href="#五、设计成果" class="headerlink" title="五、设计成果"></a>五、设计成果</h1><p>我们设计的安全即时通讯系统实现了以下功能：</p><h2 id="登陆功能界面："><a href="#登陆功能界面：" class="headerlink" title="登陆功能界面："></a>登陆功能界面：</h2><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/9.png"></p><p>如果输入不正确，则弹出：</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/10.png"></p><h2 id="注册功能界面："><a href="#注册功能界面：" class="headerlink" title="注册功能界面："></a>注册功能界面：</h2><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/11.png"></p><p>在注册中，我们也实现了检验功能，若输入不正确的信息，则显示：</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/12.png"></p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/13.png"></p><h2 id="通讯系统主界面："><a href="#通讯系统主界面：" class="headerlink" title="通讯系统主界面："></a>通讯系统主界面：</h2><p>登录成功后，原始界面显示如下，ADD与DELETE在聊天框右上角，可以通过ADD进行好友添加，DELETE进行好友删除</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/14.png"></p><h2 id="通讯录管理功能：添加、删除好友"><a href="#通讯录管理功能：添加、删除好友" class="headerlink" title="通讯录管理功能：添加、删除好友"></a>通讯录管理功能：添加、删除好友</h2><p>设定用户的主键为邮箱，通过搜索用户邮箱进行删除,通过搜索Caicai用户的邮箱进行删除</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/15.png"></p><p>删除Caicai好友成功：</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/16.png"></p><p>点击ADD，添加好友，通过输入好友Caicai邮箱进行添加：</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/17.png"></p><p>添加成功后显示用户hr已添加Caicai为好友</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/18.png"></p><h2 id="即时通讯功能："><a href="#即时通讯功能：" class="headerlink" title="即时通讯功能："></a>即时通讯功能：</h2><p>添加好友后，可以开启实时通讯系统，若好友不在线，发送消息时弹出窗口进行提示，但仍可以发送信息：</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/19.png"></p><p>点击输入框左侧的圆脸按钮，发送表情：</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/20.png"></p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/21.png"></p><p>点击输入框左侧文件夹按钮，上传文件：</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/26.png"></p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/22.png"></p><p>实现群组功能，登陆后可以进行群聊，666m在群里发送消息</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/23.png"></p><p>用户hr在群里发送消息，同时可以接收到好友666m在群聊Group001中发送的消息</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/24.png"></p><p>用户hooray可以接收到好友hr与好友666m发送的群聊消息</p><p><img src="/2023/09/25/an-quan-ji-shi-tong-xun-xi-tong/25.png"></p><h1 id="六、设计心得"><a href="#六、设计心得" class="headerlink" title="六、设计心得"></a>六、设计心得</h1><p>在本次项目的程序设计中，我们对网络传输协议的混合架构、加解密和信息隐藏、实现前端界面、数据库管理等所学知识的理解更加深入，通过不断解决设计过程中的各种问题，收获了宝贵的实践经验。如在设计数据库时，具体关系如何实现、哪个是主码、需不需要外键、触发器等问题经过了许多尝试和推敲；在使用Tomcat时因版本不一致导致无法部署；由于负责后端的两位组员使用的jdk版本不一致（分别为jdk1.8、jakarta和jdk11、javax），其中jdk11的新特性导致许多地方需要修改，增大了工作量；在前后端接口设计部分遇到许多技术问题，最终通过学习和使用js中的API实现等等。在遇到问题和解决问题的过程中，我们积累了很多宝贵经验，加深了对知识的理解。</p><p>同时，我们认识到开始实现前的整体设计的重要性。由于设计初期我们对所需功能理解和认识的不全面，实现过程中不断遇到需要大量添加、修改甚至更换方法的情况，导致进展没有达到预期的速度。我们认识到团队合作中分工和沟通的重要性，在缺少合理分工和对明确目标的认识时，达到预期成果就会遇到困难。每位成员都完成自己需要负责的内容部分并及时沟通，才能更好地将设计成果整合形成一个完整的大型程序。</p><h1 id="七、团队分工说明"><a href="#七、团队分工说明" class="headerlink" title="七、团队分工说明"></a>七、团队分工说明</h1><p>王惟：服务器的开发，包括用户注册、验证、公钥提供和在线状态维护，websocket逻辑设计与实现，文档书写</p><p>夏鸿睿：客户端的开发，包括注册、认证登录、通信录管理和即时通讯功能，数据库设计与实现，文档书写</p><p>魏瑞敏 ：协调团队成员工作，文档书写，完成前端登录注册聊天界面设计实现，页面调整，功能添加与接口实现</p><p>杨雅雯：客户端的端到端透明加解密功能，文档书写，聊天与通讯录设计，保密通信设计，接口实现</p><p>范茜文：查阅javaSSM框架、netty及服务器的相关资料，文档书写，登录注册聊天与系统结构逻辑设计，接口实现</p>]]></content>
      
      
      <categories>
          
          <category> java-project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> webSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单邮件收发系统</title>
      <link href="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/"/>
      <url>/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><p>Maven+Java Socket+JavaMail+wireshark</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>1、Mail 类 封装一封邮件中所应包含的内容</p><p>2、serveSocket 用于接收客户连接请求，参数port指定服务器要绑定的端口（服务器要监听的端口），参数backlog指定客户连接请求队列的长度</p><p>3、MailSender类 用于发送邮件，构造器中封装了properties配置变量，sender() 方法，通过session与服务器进行交互建立transport ；createMimeMessage （）方法 用于封装一个邮件信息，使用MimeMessage类进行封装<br>4、Pattern 类是Java中用于编译正则表达式的类</p><p>5、Matcher 类是Java中用于执行匹配操作的类</p><h3 id="定义参数变量"><a href="#定义参数变量" class="headerlink" title="定义参数变量"></a>定义参数变量</h3><p>1、Session 用于收集JavaMail运行过程中的环境信息，解析上文提到的properties配置，找到对应配置信息</p><p>2、properties 配置邮件发送的主机，服务器，以及相关配置参数</p><p>3、用于读写的io：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">InputStream</span> <span class="variable">input</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">InputStreamReader</span> <span class="variable">inputStreamReader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">output</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br></pre></td></tr></tbody></table></figure><p>4、Map&lt;String, String&gt; JsonData 封装http返回的json数据键值对</p><p>5、String[] KeyWords  包含http消息体中关键词组</p><p>6、Map&lt;String, String&gt; FormData(String data) 利用 java.net.URLDecoder 对消息体消息进行解码</p><h2 id="模块结构"><a href="#模块结构" class="headerlink" title="模块结构"></a>模块结构</h2><p>1、serve 类 ==&gt; 接收客户连接请求，获取连接ip和端口（远程服务器的端口），创建receive类，接收文件，并进行邮件转发</p><p>2、Receive类 ==&gt; 通过http协议接收邮件内容，对发送者和接收者邮箱进行差错检查，创建Mail类，存储邮件消息，处理http消息体内容，并创建MailSender对象，进行邮件转发</p><p>3、Mail类 ==&gt; 作为Bean 存储邮件消息</p><p>4、MailSender类 ==&gt;接收邮件消息，创建properties配置，创建session读取配置，建立连接transport ，封装一封完整邮件，发送</p><h2 id="算法流程"><a href="#算法流程" class="headerlink" title="算法流程"></a>算法流程</h2><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/NetWork.png" alt="NetWork.png"></p><h2 id="功能模块实现要点"><a href="#功能模块实现要点" class="headerlink" title="功能模块实现要点"></a>功能模块实现要点</h2><p>1、接收Http消息时，需要区分消息头和消息体，中间会有空行，此时应隔开</p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image.png" alt="image.png"></p><p>2、消息体消息处理 </p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image1.png" alt="image.png"></p><p>wireshark抓包分析可知，均为json 键值对消息，使用Map来接收，同时消息体消息需要进行url解码，否则会出现乱码</p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image2.png" alt="image.png"></p><p>3、关键消息的提取，通过用接收的数据与关键词数组进行匹配来接收数据</p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image3.png" alt="image.png"></p><p>4、提取消息，消息可能包含很多其他内容，我们利用正则匹配和字符剪切获取我们所需信息</p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image4.png" alt="image.png"></p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image5.png" alt="image.png"></p><p>5、差错检查和处理，利用正则表达式对邮箱格式进行检查，若错误，返回错误信息</p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image6.png" alt="image.png"></p><p>6、建立连接，利用session读取配置文件，同时开启debug，获得log信息，获取邮件传输对象</p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image7.png" alt="image.png"></p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image8.png" alt="image.png"></p><p>7、邮件的封装，利用MimeMessage类相关方法对邮件内容进行格式化封装</p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image9.png" alt="image.png"></p><h2 id="本机测试结果"><a href="#本机测试结果" class="headerlink" title="本机测试结果"></a>本机测试结果</h2><p>   设置代理，利用qq邮箱发送（可截个网址改为http的图）</p><p>   <img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image10.png" alt="image.png"></p><p>   <img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image11.png" alt="image.png"></p><p>   wireshark抓包结果 上为http，下为smtp</p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image12.png" alt="image.png"></p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image13.png" alt="image.png"></p><p>输出的log信息</p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image14.png" alt="image.png"></p><p><img src="/2023/09/25/jian-dan-you-jian-shou-fa-xi-tong/image15.png" alt="image.png"></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1、处理http消息时，初始时为区分开消息头和消息体的提取，导致，读取时用时过长，且读取信息不够完整，此处耗时较久，后通过阅读http协议接收相关情况，解决</p><p>2、使用javamail发送邮件时，会由于读取邮件正文不完整，导致抛出空指针异常，后对接收邮件正文进行正则处理，解决</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>jdk1.8  </p><p>JavaMail1.4.7 </p><p>Java activation1.1</p><h2 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a>代码配置</h2><p>配置Maven pom.xml 文件 导入 JavaMail1.4.7 和 activation1.1</p><h2 id="实现环境"><a href="#实现环境" class="headerlink" title="实现环境"></a>实现环境</h2><p>windows10+FireFox（其他浏览器可能存在加密问题，导致抓不到包）</p>]]></content>
      
      
      <categories>
          
          <category> java-project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaMail </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>非关系型数据库--NoSQL</title>
      <link href="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/"/>
      <url>/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/</url>
      
        <content type="html"><![CDATA[<h2 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h2><p>NoSQL(Not only SQL)是对不同于传统的关系数据库的数据库管理系统的统称，即广义地来说可以把所有不是关系型数据库的数据库统称为NoSQL。</p><p>NoSQL 数据库专门构建用于特定的数据模型，并且具有灵活的架构来构建现代应用程序。NoSQL 数据库使用各种数据模型来访问和管理数据。这些类型的数据库专门针对需要大数据量、低延迟和灵活数据模型的应用程序进行了优化，这是通过放宽其他数据库的某些数据一致性限制来实现的。</p><h3 id="1-1-常见分类"><a href="#1-1-常见分类" class="headerlink" title="1.1 常见分类"></a>1.1 常见分类</h3><h4 id="键值数据库"><a href="#键值数据库" class="headerlink" title="键值数据库"></a>键值数据库</h4><p>键值：键值数据库是高度可分区的，并且允许以其他类型的数据库无法实现的规模进行水平扩展。</p><p>键值数据库是一种非关系数据库，它使用简单的键值方法来存储数据。键值数据库将数据存储为键值对集合，其中键作为唯一标识符。键和值都可以是从简单对象到复杂复合对象的任何内容。键值数据库是高度可分区·的，并且允许以其他类型的数据库无法实现的规模进行水平扩展。</p><h4 id="内存数据库"><a href="#内存数据库" class="headerlink" title="内存数据库"></a>内存数据库</h4><p>内存：游戏和广告技术应用程序具有排行榜、会话存储和实时分析等使用案例，它们需要微秒响应时间并且可能随时出现大规模的流量高峰。</p><h4 id="文档数据库"><a href="#文档数据库" class="headerlink" title="文档数据库"></a>文档数据库</h4><p>文档：在应用程序代码中，数据通常表示为对象或 JSON 文档，因为对开发人员而言它是高效和直观的数据模型。</p><p>文档数据库是一种非关系数据库，旨在将数据作为类 JSON 文档存储和查询。文档数据库让开发人员可以使用他们在其应用程序代码中使用的相同文档模型格式，更轻松地在数据库中存储和查询数据。文档和文档数据库的灵活、半结构化和层级性质允许它们随应用程序的需求而变化。文档模型可以很好地与目录、用户配置文件和内容管理系统等使用案例配合使用，其中每个文档都是唯一的，并会随时间而变化。文档数据库支持灵活的索引、强大的临时查询和文档集合分析。</p><h4 id="图形数据库"><a href="#图形数据库" class="headerlink" title="图形数据库"></a>图形数据库</h4><p>图形：图形数据库旨在轻松构建和运行与高度连接的数据集一起使用的应用程序。热门图形数据库包括 Neo4j 和 Giraph。图形数据库专门用于存储和导航关系。关系是图形数据库中的一等公民，图形数据库的大部分价值都源自于这些关系。图形数据库使用节点来存储数据实体，并使用边缘来存储实体之间的关系。边缘始终有一个开始节点、结束节点、类型和方向，并且边缘可以描述父子关系、操作、所有权等。一个节点可以拥有的关系的数量和类型没有限制。</p><p>图形数据库中的图形可依据具体的边缘类型进行遍历，或者也可对整个图形进行遍历。在图形数据库中，遍历联结或关系非常快，因为节点之间的关系不是在查询时计算的，而是留存在数据库中。在社交网络、推荐引擎和欺诈检测等使用案例中，您需要在数据之间创建关系并快速查询这些关系，此时，图形数据库更具优势。</p><h4 id="搜索数据库"><a href="#搜索数据库" class="headerlink" title="搜索数据库"></a><strong>搜索数据库</strong></h4><p>搜索：许多应用程序输出日志以帮助开发人员解决问题。搜索引擎数据库是一种非关系数据库，专用于数据内容的搜索。搜索引擎数据库使用索引对数据之间的相似特征进行分类，并增强搜索功能。搜索引擎数据库经过优化，可处理可能是长数据，半结构数据或非结构数据的数据，并且它们通常提供专门的方法，例如全文搜索，复杂的搜索表达式和搜索结果排名。</p><h3 id="1-2-BASE原则"><a href="#1-2-BASE原则" class="headerlink" title="1.2 BASE原则"></a>1.2 BASE原则</h3><p> BASE：Basically Available, Soft-state, Eventually Consistent。 由 Eric Brewer 定义。BASE是NoSQL数据库通常对可用性及一致性的弱要求原则:</p><ul><li><p>Basically Availble –基本可用</p></li><li><p>Soft-state –软状态/柔性事务。 “Soft state” 可以理解为”无连接”的, 而 “Hard state” 是”面向连接”的</p></li><li><p>Eventual Consistency – 最终一致性， 也是是 ACID 的最终目的。</p></li></ul><p>BASE模型是传统ACID模型的反面，不同于ACID，BASE强调牺牲高一致性，从而获得可用性，数据允许在一段时间内的不一致，只要保证最终一致就可以了。</p><h3 id="1-3-特点"><a href="#1-3-特点" class="headerlink" title="1.3 特点"></a>1.3 特点</h3><ol><li>易扩展</li></ol><p>当一台机器不够用了，很容易添加一个新的服务器，只要配置好环境之后，自动使用。<br>2. 大数据量、高性能</p><p>读写速度快，nosql基本都是内存数据库，比硬盘存储要快很多，查询数据快。<br>3. 灵活性</p><p>NoSQL无需事先为 要存储的数据 建立字段，随时可以存储自定义的数据格式，在关系型数据库添加字段和删除字段是非常麻烦的。<br>4. 高可用</p><p>一台机器宕机出问题了，不会影响其他的机器。</p><h2 id="MongoDB技术原理"><a href="#MongoDB技术原理" class="headerlink" title="MongoDB技术原理"></a>MongoDB技术原理</h2><p>MongoDB是一个基于分布式文件存储的数据库，使用BSON格式保存数据，使用B-树作为索引结构，每个节点即保存数据又保存索引，可以为WEB应用提供可拓展、高性能、易部署的数据存储解决方案。</p><h3 id="BSON"><a href="#BSON" class="headerlink" title="BSON"></a>BSON</h3><p>BSON是一种类json的一种二进制形式的存储格式，简称Binary JSON，它和JSON一样，支持内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，如Date和Binary Data类型。BSON可以做为网络数据交换的一种存储形式,是一种schema-less的存储形式，它的优点是灵活性高，但它的缺点是空间利用率不是很理想。</p><h3 id="MongoDB索引底层原理"><a href="#MongoDB索引底层原理" class="headerlink" title="MongoDB索引底层原理"></a>MongoDB索引底层原理</h3><p>MongoDB使用B-树，所有节点都有Data域，只要找到指索引就可以进行访问，单次查询从结构上来看要快于MySql。</p><h4 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h4><p>B-树的特点:<br>(1) 多路 非二叉树<br>(2) 每个节点 既保存数据 又保存索引<br>(3) 搜索时 相当于二分查找</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/20210107091340399.png" alt="20210107091340399.png"></p><h3 id="MongoDB架构"><a href="#MongoDB架构" class="headerlink" title="MongoDB架构"></a>MongoDB架构</h3><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image.png" alt="image.png"></p><p>MongoDB 与 MySQL 中的架构相差不多，底层都使用了可插拔的存储引擎以满足用户的不同需要。用户可以根据程序的数据特征选择不同的存储引擎,在最新版本的 MongoDB 中使用了 WiredTiger 作为默认的存储引擎，WiredTiger 提供了不同粒度的并发控制和压缩机制，能够为不同种类的应用提供了最好的性能和存储率。<br>在存储引擎上层的就是 MongoDB 的数据模型和查询语言了，由于 MongoDB 对数据的存储与 RDBMS有较大的差异，所以它创建了一套不同的数据模型和查询语言。</p><h3 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h3><ul><li><p>内嵌<br>内嵌的方式指的是把相关联的数据保存在同一个文档结构之中。MongoDB的文档结构允许一个字段或者一个数组内的值作为一个嵌套的文档</p></li><li><p>引用<br>引用方式通过存储数据引用信息来实现两个不同文档之间的关联,应用程序可以通过解析这些数据引用来访问相关数据</p></li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>MongoDB的应用场景包括<strong>物流、社交、物联网、游戏等领域</strong>。在物流场景中，MongoDB可以存储订单信息，订单状态在运送过程中会不断更新，以MongoDB内嵌数组的形式来存储，一次查询就能将订单所有的变更读取出来。在社交场景中，MongoDB可以存储用户信息，以及用户发表的朋友圈信息，通过地理位置索引实现附近的人、地点等功能。在物联网场景中，MongoDB可以存储所有接入的智能设备信息，以及设备汇报的日志信息，并对这些信息进行多维度的分析。此外，MongoDB还适合用于日志存储、敏捷开发、地理位置信息存储、json存储等场景。MongoDB不适合高度事务性的系统，例如银行或会计系统，以及传统的商业智能应用。</p><p>案例1</p><p>用在应用服务器的日志记录，查找起来比文本灵活，导出也很方便。也是给应用练手，从外围系统开始使用MongoDB。 用在一些第三方信息的获取或者抓取，因为MongoDB的schema-less，所有格式灵活，不用为了各种格式不一样的信息专门设计统一的格式，极大的减少开发的工作。</p><p>案例2</p><p>使用MongoDB做了O2O快递应用，·将送快递骑手、快递商家的信息（包含位置信息）存储在 MongoDB，然后通过 MongoDB 的地理位置查询，这样很方便的实现了查找附近的商家、骑手等功能，使得快递骑手能就近接单，</p><h2 id="DEMO展示"><a href="#DEMO展示" class="headerlink" title="DEMO展示"></a>DEMO展示</h2><h3 id="MongoDB的安装"><a href="#MongoDB的安装" class="headerlink" title="MongoDB的安装"></a>MongoDB的安装</h3><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image1.png" alt="image1.png"></p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image2.png" alt="image2.png"></p><p>可视化工具MongoDB Compass</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image3.png" alt="image3.png"></p><h3 id="基本功能展示"><a href="#基本功能展示" class="headerlink" title="基本功能展示"></a>基本功能展示</h3><p>新增数据库和表</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image4.png" alt="image4.png"></p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image5.png" alt="image5.png"></p><p>插入</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image6.png" alt="image6.png"></p><p>修改</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image7.png" alt="image7.png"></p><p>按条件查询</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image8.png" alt="image8.png"></p><p>删除</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image9.png" alt="image9.png"></p><h3 id="java连接MongoDB-使用基本CRUD操作"><a href="#java连接MongoDB-使用基本CRUD操作" class="headerlink" title="java连接MongoDB,使用基本CRUD操作"></a>java连接MongoDB,使用基本CRUD操作</h3><p>建立连接</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image10.png" alt="image10.png"></p><p>新增</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image11.png" alt="image11.png"></p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image12.png" alt="image12.png"></p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image13.png" alt="image13.png"></p><p>删除</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image14.png" alt="image14.png"></p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image15.png" alt="image15.png"></p><p>插入</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image16.png" alt="image16.png"></p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image17.png" alt="image17.png"></p><p>查找</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image18.png" alt="image18.png"></p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image19.png" alt="image19.png"></p><p>按名字查找</p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image20.png" alt="image20.png"></p><p><img src="/2023/09/22/fei-guan-xi-xing-shu-ju-ku-nosql/image21.png" alt="image21.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过对MongoDB 基本CRUD的使用，可以发现，MongoDB的query语句比起Mysql来说更为简洁直接，而数据的存储也是明显使用键值对的方式进行的，并且配备有对应独特的ObjectId，方便查询。同时，条件查询的语句更为简洁明白，添加，删除字段的方式更加简单，明白，不用刻意去强调数据的类型。但是，MongoDB无事务处理，附加功能和报表支持也不好，在与编程语言结合这一点上远不如mysql已经开发好的众多方法来的快速简单。</p>]]></content>
      
      
      <categories>
          
          <category> 技术学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
